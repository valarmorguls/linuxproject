// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#include "message_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_5fdefine_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MsgHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddFriendReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddFriendRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CheckUserExistReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CheckUserExistRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CreateUserReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CreateUserRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DelFriendReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DelFriendRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetMessageListReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetPhotoReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetPhotoRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetUserIdByNameReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetUserIdByNameRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LoginCheckReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LoginCheckRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LoginReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LoginRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LogoutReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LogoutRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PublishMessageReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PublishMessageRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RegReq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RegRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetMessageListRsp;
}  // namespace protobuf_message_5fdefine_2eproto
namespace ssp {
class MsgHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgHeader>
      _instance;
} _MsgHeader_default_instance_;
class RegReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegReq>
      _instance;
} _RegReq_default_instance_;
class RegRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegRsp>
      _instance;
} _RegRsp_default_instance_;
class LoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginReq>
      _instance;
} _LoginReq_default_instance_;
class LoginRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRsp>
      _instance;
} _LoginRsp_default_instance_;
class LogoutReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutReq>
      _instance;
} _LogoutReq_default_instance_;
class LogoutRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRsp>
      _instance;
} _LogoutRsp_default_instance_;
class AddFriendReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFriendReq>
      _instance;
} _AddFriendReq_default_instance_;
class AddFriendRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFriendRsp>
      _instance;
} _AddFriendRsp_default_instance_;
class DelFriendReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelFriendReq>
      _instance;
} _DelFriendReq_default_instance_;
class DelFriendRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelFriendRsp>
      _instance;
} _DelFriendRsp_default_instance_;
class PublishMessageReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishMessageReq>
      _instance;
} _PublishMessageReq_default_instance_;
class PublishMessageRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishMessageRsp>
      _instance;
} _PublishMessageRsp_default_instance_;
class GetMessageListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageListReq>
      _instance;
} _GetMessageListReq_default_instance_;
class MessageItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageItem>
      _instance;
} _MessageItem_default_instance_;
class GetMessageListRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageListRsp>
      _instance;
} _GetMessageListRsp_default_instance_;
class GetPhotoReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPhotoReq>
      _instance;
} _GetPhotoReq_default_instance_;
class GetPhotoRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPhotoRsp>
      _instance;
} _GetPhotoRsp_default_instance_;
class CommonReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonReq>
      _instance;
} _CommonReq_default_instance_;
class CommonRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonRsp>
      _instance;
} _CommonRsp_default_instance_;
class GetUserIdByNameReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUserIdByNameReq>
      _instance;
} _GetUserIdByNameReq_default_instance_;
class GetUserIdByNameRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUserIdByNameRsp>
      _instance;
} _GetUserIdByNameRsp_default_instance_;
class CreateUserReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateUserReq>
      _instance;
} _CreateUserReq_default_instance_;
class CreateUserRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateUserRsp>
      _instance;
} _CreateUserRsp_default_instance_;
class LoginCheckReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginCheckReq>
      _instance;
} _LoginCheckReq_default_instance_;
class LoginCheckRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginCheckRsp>
      _instance;
} _LoginCheckRsp_default_instance_;
class CheckUserExistReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserExistReq>
      _instance;
} _CheckUserExistReq_default_instance_;
class CheckUserExistRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserExistRsp>
      _instance;
} _CheckUserExistRsp_default_instance_;
class ServerToUserReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerToUserReq>
      _instance;
} _ServerToUserReq_default_instance_;
class UserToServerRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserToServerRsp>
      _instance;
} _UserToServerRsp_default_instance_;
}  // namespace ssp
namespace protobuf_message_5fdefine_2eproto {
static void InitDefaultsMsgHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_MsgHeader_default_instance_;
    new (ptr) ::ssp::MsgHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::MsgHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsgHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsgHeader}, {}};

static void InitDefaultsRegReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_RegReq_default_instance_;
    new (ptr) ::ssp::RegReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::RegReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsRegRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_RegRsp_default_instance_;
    new (ptr) ::ssp::RegRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::RegRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLoginReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginReq_default_instance_;
    new (ptr) ::ssp::LoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLoginRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginRsp_default_instance_;
    new (ptr) ::ssp::LoginRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLogoutReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LogoutReq_default_instance_;
    new (ptr) ::ssp::LogoutReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LogoutReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogoutReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogoutReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLogoutRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LogoutRsp_default_instance_;
    new (ptr) ::ssp::LogoutRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LogoutRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogoutRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogoutRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsAddFriendReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddFriendReq_default_instance_;
    new (ptr) ::ssp::AddFriendReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddFriendReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddFriendReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddFriendReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsAddFriendRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddFriendRsp_default_instance_;
    new (ptr) ::ssp::AddFriendRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddFriendRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddFriendRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddFriendRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsDelFriendReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelFriendReq_default_instance_;
    new (ptr) ::ssp::DelFriendReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelFriendReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DelFriendReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDelFriendReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsDelFriendRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelFriendRsp_default_instance_;
    new (ptr) ::ssp::DelFriendRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelFriendRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DelFriendRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDelFriendRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsPublishMessageReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_PublishMessageReq_default_instance_;
    new (ptr) ::ssp::PublishMessageReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::PublishMessageReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PublishMessageReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPublishMessageReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsPublishMessageRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_PublishMessageRsp_default_instance_;
    new (ptr) ::ssp::PublishMessageRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::PublishMessageRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PublishMessageRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPublishMessageRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsGetMessageListReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetMessageListReq_default_instance_;
    new (ptr) ::ssp::GetMessageListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetMessageListReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMessageListReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMessageListReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsMessageItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_MessageItem_default_instance_;
    new (ptr) ::ssp::MessageItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::MessageItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageItem}, {}};

static void InitDefaultsGetMessageListRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetMessageListRsp_default_instance_;
    new (ptr) ::ssp::GetMessageListRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetMessageListRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetMessageListRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetMessageListRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,
      &protobuf_message_5fdefine_2eproto::scc_info_MessageItem.base,}};

static void InitDefaultsGetPhotoReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetPhotoReq_default_instance_;
    new (ptr) ::ssp::GetPhotoReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetPhotoReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPhotoReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPhotoReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsGetPhotoRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetPhotoRsp_default_instance_;
    new (ptr) ::ssp::GetPhotoRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetPhotoRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPhotoRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPhotoRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsCommonReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CommonReq_default_instance_;
    new (ptr) ::ssp::CommonReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CommonReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_CommonReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsCommonReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,
      &protobuf_message_5fdefine_2eproto::scc_info_RegReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LoginReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageListReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoReq.base,}};

static void InitDefaultsCommonRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CommonRsp_default_instance_;
    new (ptr) ::ssp::CommonRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CommonRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_CommonRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsCommonRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,
      &protobuf_message_5fdefine_2eproto::scc_info_RegRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LoginRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageListRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoRsp.base,}};

static void InitDefaultsGetUserIdByNameReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetUserIdByNameReq_default_instance_;
    new (ptr) ::ssp::GetUserIdByNameReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetUserIdByNameReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetUserIdByNameReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetUserIdByNameReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsGetUserIdByNameRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetUserIdByNameRsp_default_instance_;
    new (ptr) ::ssp::GetUserIdByNameRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetUserIdByNameRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetUserIdByNameRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetUserIdByNameRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsCreateUserReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CreateUserReq_default_instance_;
    new (ptr) ::ssp::CreateUserReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CreateUserReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateUserReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateUserReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsCreateUserRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CreateUserRsp_default_instance_;
    new (ptr) ::ssp::CreateUserRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CreateUserRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateUserRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateUserRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLoginCheckReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginCheckReq_default_instance_;
    new (ptr) ::ssp::LoginCheckReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginCheckReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginCheckReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginCheckReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsLoginCheckRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginCheckRsp_default_instance_;
    new (ptr) ::ssp::LoginCheckRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginCheckRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginCheckRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginCheckRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsCheckUserExistReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CheckUserExistReq_default_instance_;
    new (ptr) ::ssp::CheckUserExistReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CheckUserExistReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CheckUserExistReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCheckUserExistReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsCheckUserExistRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_CheckUserExistRsp_default_instance_;
    new (ptr) ::ssp::CheckUserExistRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::CheckUserExistRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CheckUserExistRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCheckUserExistRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,}};

static void InitDefaultsServerToUserReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_ServerToUserReq_default_instance_;
    new (ptr) ::ssp::ServerToUserReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::ServerToUserReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ServerToUserReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsServerToUserReq}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_CreateUserReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LoginCheckReq.base,
      &protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistReq.base,}};

static void InitDefaultsUserToServerRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_UserToServerRsp_default_instance_;
    new (ptr) ::ssp::UserToServerRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::UserToServerRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_UserToServerRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsUserToServerRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base,
      &protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_CreateUserRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_LoginCheckRsp.base,
      &protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistRsp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MsgHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFriendReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFriendRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelFriendReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelFriendRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishMessageReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishMessageRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageListReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessageItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageListRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPhotoReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPhotoRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUserIdByNameReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUserIdByNameRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateUserReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateUserRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginCheckReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginCheckRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserExistReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserExistRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerToUserReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserToServerRsp.base);
}

::google::protobuf::Metadata file_level_metadata[30];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MsgHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MsgHeader, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MsgHeader, cmd_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, from_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, password_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, other_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, other_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, content_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListReq, user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageItem, publisher_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageItem, publish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageItem, content_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageListRsp, message_list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, last_publisher_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, last_publisher_name_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, reg_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, login_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, logout_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, add_friend_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, del_friend_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, publish_message_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, get_message_list_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonReq, get_photo_req_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, reg_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, login_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, logout_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, add_friend_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, del_friend_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, publish_message_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, get_message_list_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CommonRsp, get_photo_rsp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameReq, user_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserReq, from_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CreateUserRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckReq, password_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginCheckRsp, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistReq, user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::CheckUserExistRsp, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, get_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, create_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, login_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::ServerToUserReq, check_user_exist_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, get_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, create_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, login_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::UserToServerRsp, check_user_exist_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssp::MsgHeader)},
  { 9, 18, sizeof(::ssp::RegReq)},
  { 22, 30, sizeof(::ssp::RegRsp)},
  { 33, 41, sizeof(::ssp::LoginReq)},
  { 44, 52, sizeof(::ssp::LoginRsp)},
  { 55, 62, sizeof(::ssp::LogoutReq)},
  { 64, 72, sizeof(::ssp::LogoutRsp)},
  { 75, 83, sizeof(::ssp::AddFriendReq)},
  { 86, 93, sizeof(::ssp::AddFriendRsp)},
  { 95, 103, sizeof(::ssp::DelFriendReq)},
  { 106, 113, sizeof(::ssp::DelFriendRsp)},
  { 115, 123, sizeof(::ssp::PublishMessageReq)},
  { 126, 133, sizeof(::ssp::PublishMessageRsp)},
  { 135, 142, sizeof(::ssp::GetMessageListReq)},
  { 144, 152, sizeof(::ssp::MessageItem)},
  { 155, 163, sizeof(::ssp::GetMessageListRsp)},
  { 166, 173, sizeof(::ssp::GetPhotoReq)},
  { 175, 184, sizeof(::ssp::GetPhotoRsp)},
  { 188, 202, sizeof(::ssp::CommonReq)},
  { 211, 225, sizeof(::ssp::CommonRsp)},
  { 234, 241, sizeof(::ssp::GetUserIdByNameReq)},
  { 243, 251, sizeof(::ssp::GetUserIdByNameRsp)},
  { 254, 263, sizeof(::ssp::CreateUserReq)},
  { 267, 275, sizeof(::ssp::CreateUserRsp)},
  { 278, 286, sizeof(::ssp::LoginCheckReq)},
  { 289, 297, sizeof(::ssp::LoginCheckRsp)},
  { 300, 307, sizeof(::ssp::CheckUserExistReq)},
  { 309, 316, sizeof(::ssp::CheckUserExistRsp)},
  { 318, 328, sizeof(::ssp::ServerToUserReq)},
  { 333, 343, sizeof(::ssp::UserToServerRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_MsgHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_RegReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_RegRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LogoutReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LogoutRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddFriendReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddFriendRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelFriendReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelFriendRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_PublishMessageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_PublishMessageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetMessageListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_MessageItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetMessageListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetPhotoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetPhotoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CommonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CommonRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetUserIdByNameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetUserIdByNameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CreateUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CreateUserRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginCheckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginCheckRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CheckUserExistReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_CheckUserExistRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_ServerToUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_UserToServerRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message_define.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024message_define.proto\022\003ssp\"*\n\tMsgHeader"
      "\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\"[\n\006RegRe"
      "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuse"
      "r_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\014\n\004from\030\005"
      " \001(\r\"F\n\006RegRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.Msg"
      "Header\022\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"O\n\010"
      "LoginReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader"
      "\022\021\n\tuser_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"H\n"
      "\010LoginRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeade"
      "r\022\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"<\n\tLogou"
      "tReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007"
      "user_id\030\002 \001(\r\"I\n\tLogoutRsp\022\036\n\006header\030\001 \001"
      "(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\r\022\017\n\007user_"
      "id\030\003 \001(\r\"Q\n\014AddFriendReq\022\036\n\006header\030\001 \001(\013"
      "2\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\022\020\n\010oth"
      "er_id\030\003 \001(\r\";\n\014AddFriendRsp\022\036\n\006header\030\001 "
      "\001(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\r\"Q\n\014DelF"
      "riendReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader"
      "\022\017\n\007user_id\030\002 \001(\r\022\020\n\010other_id\030\003 \001(\r\";\n\014D"
      "elFriendRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHea"
      "der\022\013\n\003ret\030\002 \001(\r\"U\n\021PublishMessageReq\022\036\n"
      "\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id"
      "\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\"@\n\021PublishMessag"
      "eRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003"
      "ret\030\002 \001(\r\"D\n\021GetMessageListReq\022\036\n\006header"
      "\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\""
      "J\n\013MessageItem\022\024\n\014publisher_id\030\001 \001(\r\022\024\n\014"
      "publish_time\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\"h\n\021G"
      "etMessageListRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.M"
      "sgHeader\022\013\n\003ret\030\002 \001(\r\022&\n\014message_list\030\003 "
      "\003(\0132\020.ssp.MessageItem\">\n\013GetPhotoReq\022\036\n\006"
      "header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030"
      "\002 \001(\r\"r\n\013GetPhotoRsp\022\036\n\006header\030\001 \001(\0132\016.s"
      "sp.MsgHeader\022\013\n\003ret\030\002 \001(\r\022\031\n\021last_publis"
      "her_id\030\003 \001(\r\022\033\n\023last_publisher_name\030\004 \001("
      "\t\"\371\002\n\tCommonReq\022\036\n\006header\030\001 \001(\0132\016.ssp.Ms"
      "gHeader\022\034\n\007reg_req\030\002 \001(\0132\013.ssp.RegReq\022 \n"
      "\tlogin_req\030\003 \001(\0132\r.ssp.LoginReq\022\"\n\nlogou"
      "t_req\030\004 \001(\0132\016.ssp.LogoutReq\022)\n\016add_frien"
      "d_req\030\005 \001(\0132\021.ssp.AddFriendReq\022)\n\016del_fr"
      "iend_req\030\006 \001(\0132\021.ssp.DelFriendReq\0223\n\023pub"
      "lish_message_req\030\007 \001(\0132\026.ssp.PublishMess"
      "ageReq\0224\n\024get_message_list_req\030\010 \001(\0132\026.s"
      "sp.GetMessageListReq\022\'\n\rget_photo_req\030\t "
      "\001(\0132\020.ssp.GetPhotoReq\"\371\002\n\tCommonRsp\022\036\n\006h"
      "eader\030\001 \001(\0132\016.ssp.MsgHeader\022\034\n\007reg_rsp\030\002"
      " \001(\0132\013.ssp.RegRsp\022 \n\tlogin_rsp\030\003 \001(\0132\r.s"
      "sp.LoginRsp\022\"\n\nlogout_rsp\030\004 \001(\0132\016.ssp.Lo"
      "goutRsp\022)\n\016add_friend_rsp\030\005 \001(\0132\021.ssp.Ad"
      "dFriendRsp\022)\n\016del_friend_rsp\030\006 \001(\0132\021.ssp"
      ".DelFriendRsp\0223\n\023publish_message_rsp\030\007 \001"
      "(\0132\026.ssp.PublishMessageRsp\0224\n\024get_messag"
      "e_list_rsp\030\010 \001(\0132\026.ssp.GetMessageListRsp"
      "\022\'\n\rget_photo_rsp\030\t \001(\0132\020.ssp.GetPhotoRs"
      "p\"G\n\022GetUserIdByNameReq\022\036\n\006header\030\001 \001(\0132"
      "\016.ssp.MsgHeader\022\021\n\tuser_name\030\002 \001(\t\"R\n\022Ge"
      "tUserIdByNameRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.M"
      "sgHeader\022\013\n\003ret\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"b"
      "\n\rCreateUserReq\022\036\n\006header\030\001 \001(\0132\016.ssp.Ms"
      "gHeader\022\021\n\tuser_name\030\002 \001(\t\022\020\n\010password\030\003"
      " \001(\t\022\014\n\004from\030\004 \001(\005\"M\n\rCreateUserRsp\022\036\n\006h"
      "eader\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005"
      "\022\017\n\007user_id\030\003 \001(\005\"T\n\rLoginCheckReq\022\036\n\006he"
      "ader\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuser_name\030"
      "\002 \001(\t\022\020\n\010password\030\003 \001(\t\"M\n\rLoginCheckRsp"
      "\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003ret\030"
      "\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"D\n\021CheckUserExist"
      "Req\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007u"
      "ser_id\030\002 \001(\005\"@\n\021CheckUserExistRsp\022\036\n\006hea"
      "der\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005\"\343"
      "\001\n\017ServerToUserReq\022\036\n\006header\030\001 \001(\0132\016.ssp"
      ".MsgHeader\022,\n\013get_user_id\030\002 \001(\0132\027.ssp.Ge"
      "tUserIdByNameReq\022\'\n\013create_user\030\003 \001(\0132\022."
      "ssp.CreateUserReq\022\'\n\013login_check\030\004 \001(\0132\022"
      ".ssp.LoginCheckReq\0220\n\020check_user_exist\030\005"
      " \001(\0132\026.ssp.CheckUserExistReq\"\343\001\n\017UserToS"
      "erverRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader"
      "\022,\n\013get_user_id\030\002 \001(\0132\027.ssp.GetUserIdByN"
      "ameRsp\022\'\n\013create_user\030\003 \001(\0132\022.ssp.Create"
      "UserRsp\022\'\n\013login_check\030\004 \001(\0132\022.ssp.Login"
      "CheckRsp\0220\n\020check_user_exist\030\005 \001(\0132\026.ssp"
      ".CheckUserExistRsp"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_define.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_5fdefine_2eproto
namespace ssp {

// ===================================================================

void MsgHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHeader::kVerFieldNumber;
const int MsgHeader::kCmdTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHeader::MsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.MsgHeader)
}
MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  // @@protoc_insertion_point(copy_constructor:ssp.MsgHeader)
}

void MsgHeader::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:ssp.MsgHeader)
  SharedDtor();
}

void MsgHeader::SharedDtor() {
}

void MsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgHeader& MsgHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_MsgHeader.base);
  return *internal_default_instance();
}


void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_type_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.MsgHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cmd_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.MsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.MsgHeader)
  return false;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 cmd_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.MsgHeader)
}

::google::protobuf::uint8* MsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.MsgHeader)
  return target;
}

size_t MsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.MsgHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.MsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_type_ = from.cmd_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHeader::InternalSwap(MsgHeader* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(cmd_type_, other->cmd_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegReq::InitAsDefaultInstance() {
  ::ssp::_RegReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegReq::kHeaderFieldNumber;
const int RegReq::kUserNameFieldNumber;
const int RegReq::kPasswordFieldNumber;
const int RegReq::kFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegReq::RegReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_RegReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.RegReq)
}
RegReq::RegReq(const RegReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:ssp.RegReq)
}

void RegReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&header_)) + sizeof(from_));
}

RegReq::~RegReq() {
  // @@protoc_insertion_point(destructor:ssp.RegReq)
  SharedDtor();
}

void RegReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegReq& RegReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_RegReq.base);
  return *internal_default_instance();
}


void RegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  from_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.RegReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.RegReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.RegReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.RegReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.RegReq)
  return false;
#undef DO_
}

void RegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional uint32 from = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.RegReq)
}

::google::protobuf::uint8* RegReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional uint32 from = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegReq)
  return target;
}

size_t RegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegReq)
    MergeFrom(*source);
  }
}

void RegReq::MergeFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000008u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReq::CopyFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReq::IsInitialized() const {
  return true;
}

void RegReq::Swap(RegReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegReq::InternalSwap(RegReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(from_, other->from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegRsp::InitAsDefaultInstance() {
  ::ssp::_RegRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegRsp::kHeaderFieldNumber;
const int RegRsp::kRetFieldNumber;
const int RegRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegRsp::RegRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_RegRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.RegRsp)
}
RegRsp::RegRsp(const RegRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.RegRsp)
}

void RegRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

RegRsp::~RegRsp() {
  // @@protoc_insertion_point(destructor:ssp.RegRsp)
  SharedDtor();
}

void RegRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RegRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegRsp& RegRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_RegRsp.base);
  return *internal_default_instance();
}


void RegRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.RegRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.RegRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.RegRsp)
  return false;
#undef DO_
}

void RegRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.RegRsp)
}

::google::protobuf::uint8* RegRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegRsp)
  return target;
}

size_t RegRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegRsp)
    MergeFrom(*source);
  }
}

void RegRsp::MergeFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRsp::CopyFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRsp::IsInitialized() const {
  return true;
}

void RegRsp::Swap(RegRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegRsp::InternalSwap(RegRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginReq::InitAsDefaultInstance() {
  ::ssp::_LoginReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kHeaderFieldNumber;
const int LoginReq::kUserNameFieldNumber;
const int LoginReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.LoginReq)
}

void LoginReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:ssp.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReq& LoginReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginReq.base);
  return *internal_default_instance();
}


void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRsp::InitAsDefaultInstance() {
  ::ssp::_LoginRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRsp::kHeaderFieldNumber;
const int LoginRsp::kRetFieldNumber;
const int LoginRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRsp::LoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginRsp)
}
LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginRsp)
}

void LoginRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:ssp.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LoginRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRsp& LoginRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginRsp.base);
  return *internal_default_instance();
}


void LoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginRsp)
  return target;
}

size_t LoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginRsp)
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRsp::InternalSwap(LoginRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutReq::InitAsDefaultInstance() {
  ::ssp::_LogoutReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutReq::kHeaderFieldNumber;
const int LogoutReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutReq::LogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutReq)
}

void LogoutReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:ssp.LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutReq& LogoutReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LogoutReq.base);
  return *internal_default_instance();
}


void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LogoutReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LogoutReq)
}

::google::protobuf::uint8* LogoutReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutReq)
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutReq::InternalSwap(LogoutReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutRsp::InitAsDefaultInstance() {
  ::ssp::_LogoutRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRsp::kHeaderFieldNumber;
const int LogoutRsp::kRetFieldNumber;
const int LogoutRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LogoutRsp)
}
LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutRsp)
}

void LogoutRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

LogoutRsp::~LogoutRsp() {
  // @@protoc_insertion_point(destructor:ssp.LogoutRsp)
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LogoutRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutRsp& LogoutRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LogoutRsp.base);
  return *internal_default_instance();
}


void LogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LogoutRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LogoutRsp)
  return false;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LogoutRsp)
}

::google::protobuf::uint8* LogoutRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutRsp)
  return target;
}

size_t LogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutRsp)
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {
  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRsp::InternalSwap(LogoutRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFriendReq::InitAsDefaultInstance() {
  ::ssp::_AddFriendReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendReq::kHeaderFieldNumber;
const int AddFriendReq::kUserIdFieldNumber;
const int AddFriendReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendReq::AddFriendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddFriendReq)
}
AddFriendReq::AddFriendReq(const AddFriendReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendReq)
}

void AddFriendReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(other_id_));
}

AddFriendReq::~AddFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendReq)
  SharedDtor();
}

void AddFriendReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFriendReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFriendReq& AddFriendReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddFriendReq.base);
  return *internal_default_instance();
}


void AddFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddFriendReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 other_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddFriendReq)
  return false;
#undef DO_
}

void AddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddFriendReq)
}

::google::protobuf::uint8* AddFriendReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendReq)
  return target;
}

size_t AddFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 other_id = 3;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendReq)
    MergeFrom(*source);
  }
}

void AddFriendReq::MergeFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendReq::CopyFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendReq::IsInitialized() const {
  return true;
}

void AddFriendReq::Swap(AddFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendReq::InternalSwap(AddFriendReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFriendReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFriendRsp::InitAsDefaultInstance() {
  ::ssp::_AddFriendRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendRsp::kHeaderFieldNumber;
const int AddFriendRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendRsp::AddFriendRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddFriendRsp)
}
AddFriendRsp::AddFriendRsp(const AddFriendRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendRsp)
}

void AddFriendRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

AddFriendRsp::~AddFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendRsp)
  SharedDtor();
}

void AddFriendRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFriendRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFriendRsp& AddFriendRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddFriendRsp.base);
  return *internal_default_instance();
}


void AddFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddFriendRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddFriendRsp)
  return false;
#undef DO_
}

void AddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddFriendRsp)
}

::google::protobuf::uint8* AddFriendRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendRsp)
  return target;
}

size_t AddFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendRsp)
    MergeFrom(*source);
  }
}

void AddFriendRsp::MergeFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRsp::CopyFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRsp::IsInitialized() const {
  return true;
}

void AddFriendRsp::Swap(AddFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendRsp::InternalSwap(AddFriendRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFriendRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelFriendReq::InitAsDefaultInstance() {
  ::ssp::_DelFriendReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelFriendReq::kHeaderFieldNumber;
const int DelFriendReq::kUserIdFieldNumber;
const int DelFriendReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelFriendReq::DelFriendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelFriendReq)
}
DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendReq)
}

void DelFriendReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(other_id_));
}

DelFriendReq::~DelFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendReq)
  SharedDtor();
}

void DelFriendReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DelFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelFriendReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelFriendReq& DelFriendReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelFriendReq.base);
  return *internal_default_instance();
}


void DelFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelFriendReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 other_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelFriendReq)
  return false;
#undef DO_
}

void DelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelFriendReq)
}

::google::protobuf::uint8* DelFriendReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendReq)
  return target;
}

size_t DelFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 other_id = 3;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelFriendReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendReq)
    MergeFrom(*source);
  }
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendReq::IsInitialized() const {
  return true;
}

void DelFriendReq::Swap(DelFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelFriendReq::InternalSwap(DelFriendReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelFriendReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelFriendRsp::InitAsDefaultInstance() {
  ::ssp::_DelFriendRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelFriendRsp::kHeaderFieldNumber;
const int DelFriendRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelFriendRsp::DelFriendRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelFriendRsp)
}
DelFriendRsp::DelFriendRsp(const DelFriendRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendRsp)
}

void DelFriendRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

DelFriendRsp::~DelFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendRsp)
  SharedDtor();
}

void DelFriendRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DelFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelFriendRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelFriendRsp& DelFriendRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelFriendRsp.base);
  return *internal_default_instance();
}


void DelFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelFriendRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelFriendRsp)
  return false;
#undef DO_
}

void DelFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelFriendRsp)
}

::google::protobuf::uint8* DelFriendRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendRsp)
  return target;
}

size_t DelFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelFriendRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendRsp)
    MergeFrom(*source);
  }
}

void DelFriendRsp::MergeFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendRsp::CopyFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendRsp::IsInitialized() const {
  return true;
}

void DelFriendRsp::Swap(DelFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelFriendRsp::InternalSwap(DelFriendRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelFriendRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishMessageReq::InitAsDefaultInstance() {
  ::ssp::_PublishMessageReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishMessageReq::kHeaderFieldNumber;
const int PublishMessageReq::kUserIdFieldNumber;
const int PublishMessageReq::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishMessageReq::PublishMessageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.PublishMessageReq)
}
PublishMessageReq::PublishMessageReq(const PublishMessageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageReq)
}

void PublishMessageReq::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

PublishMessageReq::~PublishMessageReq() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageReq)
  SharedDtor();
}

void PublishMessageReq::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void PublishMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublishMessageReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishMessageReq& PublishMessageReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_PublishMessageReq.base);
  return *internal_default_instance();
}


void PublishMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.PublishMessageReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.PublishMessageReq.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.PublishMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.PublishMessageReq)
  return false;
#undef DO_
}

void PublishMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.PublishMessageReq.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.PublishMessageReq)
}

::google::protobuf::uint8* PublishMessageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.PublishMessageReq.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageReq)
  return target;
}

size_t PublishMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishMessageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageReq)
    MergeFrom(*source);
  }
}

void PublishMessageReq::MergeFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageReq::CopyFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageReq::IsInitialized() const {
  return true;
}

void PublishMessageReq::Swap(PublishMessageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishMessageReq::InternalSwap(PublishMessageReq* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublishMessageReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishMessageRsp::InitAsDefaultInstance() {
  ::ssp::_PublishMessageRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishMessageRsp::kHeaderFieldNumber;
const int PublishMessageRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishMessageRsp::PublishMessageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.PublishMessageRsp)
}
PublishMessageRsp::PublishMessageRsp(const PublishMessageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageRsp)
}

void PublishMessageRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

PublishMessageRsp::~PublishMessageRsp() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageRsp)
  SharedDtor();
}

void PublishMessageRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PublishMessageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublishMessageRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishMessageRsp& PublishMessageRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_PublishMessageRsp.base);
  return *internal_default_instance();
}


void PublishMessageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.PublishMessageRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.PublishMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.PublishMessageRsp)
  return false;
#undef DO_
}

void PublishMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.PublishMessageRsp)
}

::google::protobuf::uint8* PublishMessageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageRsp)
  return target;
}

size_t PublishMessageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishMessageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageRsp)
    MergeFrom(*source);
  }
}

void PublishMessageRsp::MergeFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageRsp::CopyFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageRsp::IsInitialized() const {
  return true;
}

void PublishMessageRsp::Swap(PublishMessageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishMessageRsp::InternalSwap(PublishMessageRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublishMessageRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageListReq::InitAsDefaultInstance() {
  ::ssp::_GetMessageListReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageListReq::kHeaderFieldNumber;
const int GetMessageListReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageListReq::GetMessageListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageListReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetMessageListReq)
}
GetMessageListReq::GetMessageListReq(const GetMessageListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageListReq)
}

void GetMessageListReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetMessageListReq::~GetMessageListReq() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageListReq)
  SharedDtor();
}

void GetMessageListReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetMessageListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageListReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageListReq& GetMessageListReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetMessageListReq.base);
  return *internal_default_instance();
}


void GetMessageListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetMessageListReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetMessageListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetMessageListReq)
  return false;
#undef DO_
}

void GetMessageListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetMessageListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetMessageListReq)
}

::google::protobuf::uint8* GetMessageListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageListReq)
  return target;
}

size_t GetMessageListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageListReq)
    MergeFrom(*source);
  }
}

void GetMessageListReq::MergeFrom(const GetMessageListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListReq::CopyFrom(const GetMessageListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListReq::IsInitialized() const {
  return true;
}

void GetMessageListReq::Swap(GetMessageListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageListReq::InternalSwap(GetMessageListReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageListReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageItem::kPublisherIdFieldNumber;
const int MessageItem::kPublishTimeFieldNumber;
const int MessageItem::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageItem::MessageItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_MessageItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&publisher_id_, &from.publisher_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_time_) -
    reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
  // @@protoc_insertion_point(copy_constructor:ssp.MessageItem)
}

void MessageItem::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publisher_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publish_time_) -
      reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:ssp.MessageItem)
  SharedDtor();
}

void MessageItem::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageItem::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageItem& MessageItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_MessageItem.base);
  return *internal_default_instance();
}


void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.MessageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&publisher_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_time_) -
        reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.MessageItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 publisher_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_publisher_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publish_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_publish_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.MessageItem.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.MessageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.MessageItem)
  return false;
#undef DO_
}

void MessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.MessageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publisher_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->publisher_id(), output);
  }

  // optional uint32 publish_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->publish_time(), output);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.MessageItem.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.MessageItem)
}

::google::protobuf::uint8* MessageItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.MessageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publisher_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->publisher_id(), target);
  }

  // optional uint32 publish_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->publish_time(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.MessageItem.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.MessageItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 publisher_id = 1;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_id());
    }

    // optional uint32 publish_time = 2;
    if (has_publish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publish_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.MessageItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.MessageItem)
    MergeFrom(*source);
  }
}

void MessageItem::MergeFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      publisher_id_ = from.publisher_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      publish_time_ = from.publish_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::Swap(MessageItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publisher_id_, other->publisher_id_);
  swap(publish_time_, other->publish_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageItem::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageListRsp::InitAsDefaultInstance() {
  ::ssp::_GetMessageListRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageListRsp::kHeaderFieldNumber;
const int GetMessageListRsp::kRetFieldNumber;
const int GetMessageListRsp::kMessageListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageListRsp::GetMessageListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageListRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetMessageListRsp)
}
GetMessageListRsp::GetMessageListRsp(const GetMessageListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      message_list_(from.message_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageListRsp)
}

void GetMessageListRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

GetMessageListRsp::~GetMessageListRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageListRsp)
  SharedDtor();
}

void GetMessageListRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetMessageListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageListRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageListRsp& GetMessageListRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetMessageListRsp.base);
  return *internal_default_instance();
}


void GetMessageListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetMessageListRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssp.MessageItem message_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_message_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetMessageListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetMessageListRsp)
  return false;
#undef DO_
}

void GetMessageListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetMessageListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .ssp.MessageItem message_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->message_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetMessageListRsp)
}

::google::protobuf::uint8* GetMessageListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .ssp.MessageItem message_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->message_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageListRsp)
  return target;
}

size_t GetMessageListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageListRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ssp.MessageItem message_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->message_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->message_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageListRsp)
    MergeFrom(*source);
  }
}

void GetMessageListRsp::MergeFrom(const GetMessageListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_list_.MergeFrom(from.message_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListRsp::CopyFrom(const GetMessageListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListRsp::IsInitialized() const {
  return true;
}

void GetMessageListRsp::Swap(GetMessageListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageListRsp::InternalSwap(GetMessageListRsp* other) {
  using std::swap;
  CastToBase(&message_list_)->InternalSwap(CastToBase(&other->message_list_));
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageListRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPhotoReq::InitAsDefaultInstance() {
  ::ssp::_GetPhotoReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoReq::kHeaderFieldNumber;
const int GetPhotoReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoReq::GetPhotoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetPhotoReq)
}
GetPhotoReq::GetPhotoReq(const GetPhotoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoReq)
}

void GetPhotoReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetPhotoReq::~GetPhotoReq() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoReq)
  SharedDtor();
}

void GetPhotoReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetPhotoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPhotoReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPhotoReq& GetPhotoReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetPhotoReq.base);
  return *internal_default_instance();
}


void GetPhotoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPhotoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetPhotoReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetPhotoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetPhotoReq)
  return false;
#undef DO_
}

void GetPhotoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetPhotoReq)
}

::google::protobuf::uint8* GetPhotoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoReq)
  return target;
}

size_t GetPhotoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoReq)
    MergeFrom(*source);
  }
}

void GetPhotoReq::MergeFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoReq::CopyFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoReq::IsInitialized() const {
  return true;
}

void GetPhotoReq::Swap(GetPhotoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoReq::InternalSwap(GetPhotoReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPhotoReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPhotoRsp::InitAsDefaultInstance() {
  ::ssp::_GetPhotoRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoRsp::kHeaderFieldNumber;
const int GetPhotoRsp::kRetFieldNumber;
const int GetPhotoRsp::kLastPublisherIdFieldNumber;
const int GetPhotoRsp::kLastPublisherNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoRsp::GetPhotoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetPhotoRsp)
}
GetPhotoRsp::GetPhotoRsp(const GetPhotoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_publisher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_publisher_name()) {
    last_publisher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_publisher_name_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_publisher_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(last_publisher_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoRsp)
}

void GetPhotoRsp::SharedCtor() {
  last_publisher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_publisher_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(last_publisher_id_));
}

GetPhotoRsp::~GetPhotoRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoRsp)
  SharedDtor();
}

void GetPhotoRsp::SharedDtor() {
  last_publisher_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetPhotoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPhotoRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPhotoRsp& GetPhotoRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetPhotoRsp.base);
  return *internal_default_instance();
}


void GetPhotoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_publisher_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_publisher_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(last_publisher_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPhotoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetPhotoRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_publisher_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_publisher_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publisher_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_publisher_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_publisher_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_publisher_name().data(), static_cast<int>(this->last_publisher_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.GetPhotoRsp.last_publisher_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetPhotoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetPhotoRsp)
  return false;
#undef DO_
}

void GetPhotoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 last_publisher_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_publisher_id(), output);
  }

  // optional string last_publisher_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_publisher_name().data(), static_cast<int>(this->last_publisher_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.GetPhotoRsp.last_publisher_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->last_publisher_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetPhotoRsp)
}

::google::protobuf::uint8* GetPhotoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 last_publisher_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_publisher_id(), target);
  }

  // optional string last_publisher_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_publisher_name().data(), static_cast<int>(this->last_publisher_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.GetPhotoRsp.last_publisher_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->last_publisher_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoRsp)
  return target;
}

size_t GetPhotoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string last_publisher_name = 4;
    if (has_last_publisher_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_publisher_name());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 last_publisher_id = 3;
    if (has_last_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publisher_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoRsp)
    MergeFrom(*source);
  }
}

void GetPhotoRsp::MergeFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_publisher_name();
      last_publisher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_publisher_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_publisher_id_ = from.last_publisher_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRsp::CopyFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRsp::IsInitialized() const {
  return true;
}

void GetPhotoRsp::Swap(GetPhotoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoRsp::InternalSwap(GetPhotoRsp* other) {
  using std::swap;
  last_publisher_name_.Swap(&other->last_publisher_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(last_publisher_id_, other->last_publisher_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPhotoRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonReq::InitAsDefaultInstance() {
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->reg_req_ = const_cast< ::ssp::RegReq*>(
      ::ssp::RegReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->login_req_ = const_cast< ::ssp::LoginReq*>(
      ::ssp::LoginReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->logout_req_ = const_cast< ::ssp::LogoutReq*>(
      ::ssp::LogoutReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->add_friend_req_ = const_cast< ::ssp::AddFriendReq*>(
      ::ssp::AddFriendReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->del_friend_req_ = const_cast< ::ssp::DelFriendReq*>(
      ::ssp::DelFriendReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->publish_message_req_ = const_cast< ::ssp::PublishMessageReq*>(
      ::ssp::PublishMessageReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->get_message_list_req_ = const_cast< ::ssp::GetMessageListReq*>(
      ::ssp::GetMessageListReq::internal_default_instance());
  ::ssp::_CommonReq_default_instance_._instance.get_mutable()->get_photo_req_ = const_cast< ::ssp::GetPhotoReq*>(
      ::ssp::GetPhotoReq::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonReq::kHeaderFieldNumber;
const int CommonReq::kRegReqFieldNumber;
const int CommonReq::kLoginReqFieldNumber;
const int CommonReq::kLogoutReqFieldNumber;
const int CommonReq::kAddFriendReqFieldNumber;
const int CommonReq::kDelFriendReqFieldNumber;
const int CommonReq::kPublishMessageReqFieldNumber;
const int CommonReq::kGetMessageListReqFieldNumber;
const int CommonReq::kGetPhotoReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonReq::CommonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CommonReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CommonReq)
}
CommonReq::CommonReq(const CommonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reg_req()) {
    reg_req_ = new ::ssp::RegReq(*from.reg_req_);
  } else {
    reg_req_ = NULL;
  }
  if (from.has_login_req()) {
    login_req_ = new ::ssp::LoginReq(*from.login_req_);
  } else {
    login_req_ = NULL;
  }
  if (from.has_logout_req()) {
    logout_req_ = new ::ssp::LogoutReq(*from.logout_req_);
  } else {
    logout_req_ = NULL;
  }
  if (from.has_add_friend_req()) {
    add_friend_req_ = new ::ssp::AddFriendReq(*from.add_friend_req_);
  } else {
    add_friend_req_ = NULL;
  }
  if (from.has_del_friend_req()) {
    del_friend_req_ = new ::ssp::DelFriendReq(*from.del_friend_req_);
  } else {
    del_friend_req_ = NULL;
  }
  if (from.has_publish_message_req()) {
    publish_message_req_ = new ::ssp::PublishMessageReq(*from.publish_message_req_);
  } else {
    publish_message_req_ = NULL;
  }
  if (from.has_get_message_list_req()) {
    get_message_list_req_ = new ::ssp::GetMessageListReq(*from.get_message_list_req_);
  } else {
    get_message_list_req_ = NULL;
  }
  if (from.has_get_photo_req()) {
    get_photo_req_ = new ::ssp::GetPhotoReq(*from.get_photo_req_);
  } else {
    get_photo_req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.CommonReq)
}

void CommonReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_photo_req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(get_photo_req_));
}

CommonReq::~CommonReq() {
  // @@protoc_insertion_point(destructor:ssp.CommonReq)
  SharedDtor();
}

void CommonReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete reg_req_;
  if (this != internal_default_instance()) delete login_req_;
  if (this != internal_default_instance()) delete logout_req_;
  if (this != internal_default_instance()) delete add_friend_req_;
  if (this != internal_default_instance()) delete del_friend_req_;
  if (this != internal_default_instance()) delete publish_message_req_;
  if (this != internal_default_instance()) delete get_message_list_req_;
  if (this != internal_default_instance()) delete get_photo_req_;
}

void CommonReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonReq& CommonReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CommonReq.base);
  return *internal_default_instance();
}


void CommonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reg_req_ != NULL);
      reg_req_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(login_req_ != NULL);
      login_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logout_req_ != NULL);
      logout_req_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(add_friend_req_ != NULL);
      add_friend_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(del_friend_req_ != NULL);
      del_friend_req_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(publish_message_req_ != NULL);
      publish_message_req_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(get_message_list_req_ != NULL);
      get_message_list_req_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(get_photo_req_ != NULL);
    get_photo_req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CommonReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.RegReq reg_req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reg_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LoginReq login_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LogoutReq logout_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logout_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.AddFriendReq add_friend_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_friend_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.DelFriendReq del_friend_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_del_friend_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.PublishMessageReq publish_message_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_message_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetMessageListReq get_message_list_req = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_message_list_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetPhotoReq get_photo_req = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_photo_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CommonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CommonReq)
  return false;
#undef DO_
}

void CommonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .ssp.RegReq reg_req = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reg_req(), output);
  }

  // optional .ssp.LoginReq login_req = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_login_req(), output);
  }

  // optional .ssp.LogoutReq logout_req = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_logout_req(), output);
  }

  // optional .ssp.AddFriendReq add_friend_req = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_add_friend_req(), output);
  }

  // optional .ssp.DelFriendReq del_friend_req = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_del_friend_req(), output);
  }

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_publish_message_req(), output);
  }

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_get_message_list_req(), output);
  }

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_get_photo_req(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CommonReq)
}

::google::protobuf::uint8* CommonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .ssp.RegReq reg_req = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reg_req(), deterministic, target);
  }

  // optional .ssp.LoginReq login_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_login_req(), deterministic, target);
  }

  // optional .ssp.LogoutReq logout_req = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_logout_req(), deterministic, target);
  }

  // optional .ssp.AddFriendReq add_friend_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_add_friend_req(), deterministic, target);
  }

  // optional .ssp.DelFriendReq del_friend_req = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_del_friend_req(), deterministic, target);
  }

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_publish_message_req(), deterministic, target);
  }

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_get_message_list_req(), deterministic, target);
  }

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_get_photo_req(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CommonReq)
  return target;
}

size_t CommonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CommonReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.RegReq reg_req = 2;
    if (has_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reg_req_);
    }

    // optional .ssp.LoginReq login_req = 3;
    if (has_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *login_req_);
    }

    // optional .ssp.LogoutReq logout_req = 4;
    if (has_logout_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *logout_req_);
    }

    // optional .ssp.AddFriendReq add_friend_req = 5;
    if (has_add_friend_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *add_friend_req_);
    }

    // optional .ssp.DelFriendReq del_friend_req = 6;
    if (has_del_friend_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *del_friend_req_);
    }

    // optional .ssp.PublishMessageReq publish_message_req = 7;
    if (has_publish_message_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *publish_message_req_);
    }

    // optional .ssp.GetMessageListReq get_message_list_req = 8;
    if (has_get_message_list_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_message_list_req_);
    }

  }
  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (has_get_photo_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_photo_req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CommonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CommonReq)
    MergeFrom(*source);
  }
}

void CommonReq::MergeFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reg_req()->::ssp::RegReq::MergeFrom(from.reg_req());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login_req()->::ssp::LoginReq::MergeFrom(from.login_req());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_logout_req()->::ssp::LogoutReq::MergeFrom(from.logout_req());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_add_friend_req()->::ssp::AddFriendReq::MergeFrom(from.add_friend_req());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_del_friend_req()->::ssp::DelFriendReq::MergeFrom(from.del_friend_req());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_publish_message_req()->::ssp::PublishMessageReq::MergeFrom(from.publish_message_req());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_get_message_list_req()->::ssp::GetMessageListReq::MergeFrom(from.get_message_list_req());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_get_photo_req()->::ssp::GetPhotoReq::MergeFrom(from.get_photo_req());
  }
}

void CommonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReq::CopyFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {
  return true;
}

void CommonReq::Swap(CommonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonReq::InternalSwap(CommonReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(reg_req_, other->reg_req_);
  swap(login_req_, other->login_req_);
  swap(logout_req_, other->logout_req_);
  swap(add_friend_req_, other->add_friend_req_);
  swap(del_friend_req_, other->del_friend_req_);
  swap(publish_message_req_, other->publish_message_req_);
  swap(get_message_list_req_, other->get_message_list_req_);
  swap(get_photo_req_, other->get_photo_req_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonRsp::InitAsDefaultInstance() {
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->reg_rsp_ = const_cast< ::ssp::RegRsp*>(
      ::ssp::RegRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->login_rsp_ = const_cast< ::ssp::LoginRsp*>(
      ::ssp::LoginRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->logout_rsp_ = const_cast< ::ssp::LogoutRsp*>(
      ::ssp::LogoutRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->add_friend_rsp_ = const_cast< ::ssp::AddFriendRsp*>(
      ::ssp::AddFriendRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->del_friend_rsp_ = const_cast< ::ssp::DelFriendRsp*>(
      ::ssp::DelFriendRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->publish_message_rsp_ = const_cast< ::ssp::PublishMessageRsp*>(
      ::ssp::PublishMessageRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->get_message_list_rsp_ = const_cast< ::ssp::GetMessageListRsp*>(
      ::ssp::GetMessageListRsp::internal_default_instance());
  ::ssp::_CommonRsp_default_instance_._instance.get_mutable()->get_photo_rsp_ = const_cast< ::ssp::GetPhotoRsp*>(
      ::ssp::GetPhotoRsp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonRsp::kHeaderFieldNumber;
const int CommonRsp::kRegRspFieldNumber;
const int CommonRsp::kLoginRspFieldNumber;
const int CommonRsp::kLogoutRspFieldNumber;
const int CommonRsp::kAddFriendRspFieldNumber;
const int CommonRsp::kDelFriendRspFieldNumber;
const int CommonRsp::kPublishMessageRspFieldNumber;
const int CommonRsp::kGetMessageListRspFieldNumber;
const int CommonRsp::kGetPhotoRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonRsp::CommonRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CommonRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CommonRsp)
}
CommonRsp::CommonRsp(const CommonRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reg_rsp()) {
    reg_rsp_ = new ::ssp::RegRsp(*from.reg_rsp_);
  } else {
    reg_rsp_ = NULL;
  }
  if (from.has_login_rsp()) {
    login_rsp_ = new ::ssp::LoginRsp(*from.login_rsp_);
  } else {
    login_rsp_ = NULL;
  }
  if (from.has_logout_rsp()) {
    logout_rsp_ = new ::ssp::LogoutRsp(*from.logout_rsp_);
  } else {
    logout_rsp_ = NULL;
  }
  if (from.has_add_friend_rsp()) {
    add_friend_rsp_ = new ::ssp::AddFriendRsp(*from.add_friend_rsp_);
  } else {
    add_friend_rsp_ = NULL;
  }
  if (from.has_del_friend_rsp()) {
    del_friend_rsp_ = new ::ssp::DelFriendRsp(*from.del_friend_rsp_);
  } else {
    del_friend_rsp_ = NULL;
  }
  if (from.has_publish_message_rsp()) {
    publish_message_rsp_ = new ::ssp::PublishMessageRsp(*from.publish_message_rsp_);
  } else {
    publish_message_rsp_ = NULL;
  }
  if (from.has_get_message_list_rsp()) {
    get_message_list_rsp_ = new ::ssp::GetMessageListRsp(*from.get_message_list_rsp_);
  } else {
    get_message_list_rsp_ = NULL;
  }
  if (from.has_get_photo_rsp()) {
    get_photo_rsp_ = new ::ssp::GetPhotoRsp(*from.get_photo_rsp_);
  } else {
    get_photo_rsp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.CommonRsp)
}

void CommonRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_photo_rsp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(get_photo_rsp_));
}

CommonRsp::~CommonRsp() {
  // @@protoc_insertion_point(destructor:ssp.CommonRsp)
  SharedDtor();
}

void CommonRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete reg_rsp_;
  if (this != internal_default_instance()) delete login_rsp_;
  if (this != internal_default_instance()) delete logout_rsp_;
  if (this != internal_default_instance()) delete add_friend_rsp_;
  if (this != internal_default_instance()) delete del_friend_rsp_;
  if (this != internal_default_instance()) delete publish_message_rsp_;
  if (this != internal_default_instance()) delete get_message_list_rsp_;
  if (this != internal_default_instance()) delete get_photo_rsp_;
}

void CommonRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonRsp& CommonRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CommonRsp.base);
  return *internal_default_instance();
}


void CommonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CommonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reg_rsp_ != NULL);
      reg_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(login_rsp_ != NULL);
      login_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logout_rsp_ != NULL);
      logout_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(add_friend_rsp_ != NULL);
      add_friend_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(del_friend_rsp_ != NULL);
      del_friend_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(publish_message_rsp_ != NULL);
      publish_message_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(get_message_list_rsp_ != NULL);
      get_message_list_rsp_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(get_photo_rsp_ != NULL);
    get_photo_rsp_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CommonRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.RegRsp reg_rsp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reg_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LoginRsp login_rsp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LogoutRsp logout_rsp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logout_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.AddFriendRsp add_friend_rsp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_friend_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.DelFriendRsp del_friend_rsp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_del_friend_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_message_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_message_list_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_photo_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CommonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CommonRsp)
  return false;
#undef DO_
}

void CommonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CommonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .ssp.RegRsp reg_rsp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reg_rsp(), output);
  }

  // optional .ssp.LoginRsp login_rsp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_login_rsp(), output);
  }

  // optional .ssp.LogoutRsp logout_rsp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_logout_rsp(), output);
  }

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_add_friend_rsp(), output);
  }

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_del_friend_rsp(), output);
  }

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_publish_message_rsp(), output);
  }

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_get_message_list_rsp(), output);
  }

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_get_photo_rsp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CommonRsp)
}

::google::protobuf::uint8* CommonRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CommonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .ssp.RegRsp reg_rsp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reg_rsp(), deterministic, target);
  }

  // optional .ssp.LoginRsp login_rsp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_login_rsp(), deterministic, target);
  }

  // optional .ssp.LogoutRsp logout_rsp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_logout_rsp(), deterministic, target);
  }

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_add_friend_rsp(), deterministic, target);
  }

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_del_friend_rsp(), deterministic, target);
  }

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_publish_message_rsp(), deterministic, target);
  }

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_get_message_list_rsp(), deterministic, target);
  }

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_get_photo_rsp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CommonRsp)
  return target;
}

size_t CommonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CommonRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.RegRsp reg_rsp = 2;
    if (has_reg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reg_rsp_);
    }

    // optional .ssp.LoginRsp login_rsp = 3;
    if (has_login_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *login_rsp_);
    }

    // optional .ssp.LogoutRsp logout_rsp = 4;
    if (has_logout_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *logout_rsp_);
    }

    // optional .ssp.AddFriendRsp add_friend_rsp = 5;
    if (has_add_friend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *add_friend_rsp_);
    }

    // optional .ssp.DelFriendRsp del_friend_rsp = 6;
    if (has_del_friend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *del_friend_rsp_);
    }

    // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
    if (has_publish_message_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *publish_message_rsp_);
    }

    // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
    if (has_get_message_list_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_message_list_rsp_);
    }

  }
  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (has_get_photo_rsp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_photo_rsp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CommonRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CommonRsp)
    MergeFrom(*source);
  }
}

void CommonRsp::MergeFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reg_rsp()->::ssp::RegRsp::MergeFrom(from.reg_rsp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login_rsp()->::ssp::LoginRsp::MergeFrom(from.login_rsp());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_logout_rsp()->::ssp::LogoutRsp::MergeFrom(from.logout_rsp());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_add_friend_rsp()->::ssp::AddFriendRsp::MergeFrom(from.add_friend_rsp());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_del_friend_rsp()->::ssp::DelFriendRsp::MergeFrom(from.del_friend_rsp());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_publish_message_rsp()->::ssp::PublishMessageRsp::MergeFrom(from.publish_message_rsp());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_get_message_list_rsp()->::ssp::GetMessageListRsp::MergeFrom(from.get_message_list_rsp());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_get_photo_rsp()->::ssp::GetPhotoRsp::MergeFrom(from.get_photo_rsp());
  }
}

void CommonRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRsp::CopyFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRsp::IsInitialized() const {
  return true;
}

void CommonRsp::Swap(CommonRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonRsp::InternalSwap(CommonRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(reg_rsp_, other->reg_rsp_);
  swap(login_rsp_, other->login_rsp_);
  swap(logout_rsp_, other->logout_rsp_);
  swap(add_friend_rsp_, other->add_friend_rsp_);
  swap(del_friend_rsp_, other->del_friend_rsp_);
  swap(publish_message_rsp_, other->publish_message_rsp_);
  swap(get_message_list_rsp_, other->get_message_list_rsp_);
  swap(get_photo_rsp_, other->get_photo_rsp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetUserIdByNameReq::InitAsDefaultInstance() {
  ::ssp::_GetUserIdByNameReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserIdByNameReq::kHeaderFieldNumber;
const int GetUserIdByNameReq::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserIdByNameReq::GetUserIdByNameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetUserIdByNameReq)
}
GetUserIdByNameReq::GetUserIdByNameReq(const GetUserIdByNameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.GetUserIdByNameReq)
}

void GetUserIdByNameReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

GetUserIdByNameReq::~GetUserIdByNameReq() {
  // @@protoc_insertion_point(destructor:ssp.GetUserIdByNameReq)
  SharedDtor();
}

void GetUserIdByNameReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetUserIdByNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetUserIdByNameReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUserIdByNameReq& GetUserIdByNameReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameReq.base);
  return *internal_default_instance();
}


void GetUserIdByNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetUserIdByNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUserIdByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetUserIdByNameReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.GetUserIdByNameReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetUserIdByNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetUserIdByNameReq)
  return false;
#undef DO_
}

void GetUserIdByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetUserIdByNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.GetUserIdByNameReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetUserIdByNameReq)
}

::google::protobuf::uint8* GetUserIdByNameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetUserIdByNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.GetUserIdByNameReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetUserIdByNameReq)
  return target;
}

size_t GetUserIdByNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetUserIdByNameReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetUserIdByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserIdByNameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserIdByNameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetUserIdByNameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetUserIdByNameReq)
    MergeFrom(*source);
  }
}

void GetUserIdByNameReq::MergeFrom(const GetUserIdByNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetUserIdByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
  }
}

void GetUserIdByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetUserIdByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameReq::CopyFrom(const GetUserIdByNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetUserIdByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameReq::IsInitialized() const {
  return true;
}

void GetUserIdByNameReq::Swap(GetUserIdByNameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserIdByNameReq::InternalSwap(GetUserIdByNameReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetUserIdByNameReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetUserIdByNameRsp::InitAsDefaultInstance() {
  ::ssp::_GetUserIdByNameRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserIdByNameRsp::kHeaderFieldNumber;
const int GetUserIdByNameRsp::kRetFieldNumber;
const int GetUserIdByNameRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserIdByNameRsp::GetUserIdByNameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetUserIdByNameRsp)
}
GetUserIdByNameRsp::GetUserIdByNameRsp(const GetUserIdByNameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetUserIdByNameRsp)
}

void GetUserIdByNameRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetUserIdByNameRsp::~GetUserIdByNameRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetUserIdByNameRsp)
  SharedDtor();
}

void GetUserIdByNameRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetUserIdByNameRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetUserIdByNameRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUserIdByNameRsp& GetUserIdByNameRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetUserIdByNameRsp.base);
  return *internal_default_instance();
}


void GetUserIdByNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetUserIdByNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUserIdByNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetUserIdByNameRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetUserIdByNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetUserIdByNameRsp)
  return false;
#undef DO_
}

void GetUserIdByNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetUserIdByNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetUserIdByNameRsp)
}

::google::protobuf::uint8* GetUserIdByNameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetUserIdByNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetUserIdByNameRsp)
  return target;
}

size_t GetUserIdByNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetUserIdByNameRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdByNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetUserIdByNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserIdByNameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserIdByNameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetUserIdByNameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetUserIdByNameRsp)
    MergeFrom(*source);
  }
}

void GetUserIdByNameRsp::MergeFrom(const GetUserIdByNameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetUserIdByNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUserIdByNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetUserIdByNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameRsp::CopyFrom(const GetUserIdByNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetUserIdByNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameRsp::IsInitialized() const {
  return true;
}

void GetUserIdByNameRsp::Swap(GetUserIdByNameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserIdByNameRsp::InternalSwap(GetUserIdByNameRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetUserIdByNameRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateUserReq::InitAsDefaultInstance() {
  ::ssp::_CreateUserReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateUserReq::kHeaderFieldNumber;
const int CreateUserReq::kUserNameFieldNumber;
const int CreateUserReq::kPasswordFieldNumber;
const int CreateUserReq::kFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateUserReq::CreateUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CreateUserReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CreateUserReq)
}
CreateUserReq::CreateUserReq(const CreateUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:ssp.CreateUserReq)
}

void CreateUserReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&header_)) + sizeof(from_));
}

CreateUserReq::~CreateUserReq() {
  // @@protoc_insertion_point(destructor:ssp.CreateUserReq)
  SharedDtor();
}

void CreateUserReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateUserReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateUserReq& CreateUserReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CreateUserReq.base);
  return *internal_default_instance();
}


void CreateUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CreateUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  from_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CreateUserReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.CreateUserReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.CreateUserReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 from = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CreateUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CreateUserReq)
  return false;
#undef DO_
}

void CreateUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CreateUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional int32 from = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CreateUserReq)
}

::google::protobuf::uint8* CreateUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CreateUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional int32 from = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CreateUserReq)
  return target;
}

size_t CreateUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CreateUserReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 from = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CreateUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CreateUserReq)
    MergeFrom(*source);
  }
}

void CreateUserReq::MergeFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000008u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserReq::CopyFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserReq::IsInitialized() const {
  return true;
}

void CreateUserReq::Swap(CreateUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateUserReq::InternalSwap(CreateUserReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(from_, other->from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateUserReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateUserRsp::InitAsDefaultInstance() {
  ::ssp::_CreateUserRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateUserRsp::kHeaderFieldNumber;
const int CreateUserRsp::kRetFieldNumber;
const int CreateUserRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateUserRsp::CreateUserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CreateUserRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CreateUserRsp)
}
CreateUserRsp::CreateUserRsp(const CreateUserRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.CreateUserRsp)
}

void CreateUserRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

CreateUserRsp::~CreateUserRsp() {
  // @@protoc_insertion_point(destructor:ssp.CreateUserRsp)
  SharedDtor();
}

void CreateUserRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CreateUserRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateUserRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateUserRsp& CreateUserRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CreateUserRsp.base);
  return *internal_default_instance();
}


void CreateUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CreateUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CreateUserRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CreateUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CreateUserRsp)
  return false;
#undef DO_
}

void CreateUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CreateUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CreateUserRsp)
}

::google::protobuf::uint8* CreateUserRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CreateUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CreateUserRsp)
  return target;
}

size_t CreateUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CreateUserRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateUserRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CreateUserRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CreateUserRsp)
    MergeFrom(*source);
  }
}

void CreateUserRsp::MergeFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRsp::CopyFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRsp::IsInitialized() const {
  return true;
}

void CreateUserRsp::Swap(CreateUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateUserRsp::InternalSwap(CreateUserRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateUserRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginCheckReq::InitAsDefaultInstance() {
  ::ssp::_LoginCheckReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginCheckReq::kHeaderFieldNumber;
const int LoginCheckReq::kUserNameFieldNumber;
const int LoginCheckReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginCheckReq::LoginCheckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginCheckReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginCheckReq)
}
LoginCheckReq::LoginCheckReq(const LoginCheckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.LoginCheckReq)
}

void LoginCheckReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

LoginCheckReq::~LoginCheckReq() {
  // @@protoc_insertion_point(destructor:ssp.LoginCheckReq)
  SharedDtor();
}

void LoginCheckReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LoginCheckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginCheckReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginCheckReq& LoginCheckReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginCheckReq.base);
  return *internal_default_instance();
}


void LoginCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginCheckReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginCheckReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginCheckReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginCheckReq)
  return false;
#undef DO_
}

void LoginCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginCheckReq)
}

::google::protobuf::uint8* LoginCheckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginCheckReq)
  return target;
}

size_t LoginCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginCheckReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginCheckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginCheckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginCheckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginCheckReq)
    MergeFrom(*source);
  }
}

void LoginCheckReq::MergeFrom(const LoginCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
  }
}

void LoginCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckReq::CopyFrom(const LoginCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckReq::IsInitialized() const {
  return true;
}

void LoginCheckReq::Swap(LoginCheckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginCheckReq::InternalSwap(LoginCheckReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginCheckReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginCheckRsp::InitAsDefaultInstance() {
  ::ssp::_LoginCheckRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginCheckRsp::kHeaderFieldNumber;
const int LoginCheckRsp::kRetFieldNumber;
const int LoginCheckRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginCheckRsp::LoginCheckRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginCheckRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginCheckRsp)
}
LoginCheckRsp::LoginCheckRsp(const LoginCheckRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginCheckRsp)
}

void LoginCheckRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

LoginCheckRsp::~LoginCheckRsp() {
  // @@protoc_insertion_point(destructor:ssp.LoginCheckRsp)
  SharedDtor();
}

void LoginCheckRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LoginCheckRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginCheckRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginCheckRsp& LoginCheckRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginCheckRsp.base);
  return *internal_default_instance();
}


void LoginCheckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginCheckRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginCheckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginCheckRsp)
  return false;
#undef DO_
}

void LoginCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginCheckRsp)
}

::google::protobuf::uint8* LoginCheckRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginCheckRsp)
  return target;
}

size_t LoginCheckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginCheckRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginCheckRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginCheckRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginCheckRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginCheckRsp)
    MergeFrom(*source);
  }
}

void LoginCheckRsp::MergeFrom(const LoginCheckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckRsp::CopyFrom(const LoginCheckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckRsp::IsInitialized() const {
  return true;
}

void LoginCheckRsp::Swap(LoginCheckRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginCheckRsp::InternalSwap(LoginCheckRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginCheckRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckUserExistReq::InitAsDefaultInstance() {
  ::ssp::_CheckUserExistReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUserExistReq::kHeaderFieldNumber;
const int CheckUserExistReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserExistReq::CheckUserExistReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CheckUserExistReq)
}
CheckUserExistReq::CheckUserExistReq(const CheckUserExistReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.CheckUserExistReq)
}

void CheckUserExistReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

CheckUserExistReq::~CheckUserExistReq() {
  // @@protoc_insertion_point(destructor:ssp.CheckUserExistReq)
  SharedDtor();
}

void CheckUserExistReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CheckUserExistReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckUserExistReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUserExistReq& CheckUserExistReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistReq.base);
  return *internal_default_instance();
}


void CheckUserExistReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CheckUserExistReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckUserExistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CheckUserExistReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CheckUserExistReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CheckUserExistReq)
  return false;
#undef DO_
}

void CheckUserExistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CheckUserExistReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CheckUserExistReq)
}

::google::protobuf::uint8* CheckUserExistReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CheckUserExistReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CheckUserExistReq)
  return target;
}

size_t CheckUserExistReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CheckUserExistReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserExistReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CheckUserExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserExistReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUserExistReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CheckUserExistReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CheckUserExistReq)
    MergeFrom(*source);
  }
}

void CheckUserExistReq::MergeFrom(const CheckUserExistReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CheckUserExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckUserExistReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CheckUserExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistReq::CopyFrom(const CheckUserExistReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CheckUserExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistReq::IsInitialized() const {
  return true;
}

void CheckUserExistReq::Swap(CheckUserExistReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserExistReq::InternalSwap(CheckUserExistReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckUserExistReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckUserExistRsp::InitAsDefaultInstance() {
  ::ssp::_CheckUserExistRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUserExistRsp::kHeaderFieldNumber;
const int CheckUserExistRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserExistRsp::CheckUserExistRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.CheckUserExistRsp)
}
CheckUserExistRsp::CheckUserExistRsp(const CheckUserExistRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.CheckUserExistRsp)
}

void CheckUserExistRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

CheckUserExistRsp::~CheckUserExistRsp() {
  // @@protoc_insertion_point(destructor:ssp.CheckUserExistRsp)
  SharedDtor();
}

void CheckUserExistRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CheckUserExistRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckUserExistRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUserExistRsp& CheckUserExistRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_CheckUserExistRsp.base);
  return *internal_default_instance();
}


void CheckUserExistRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CheckUserExistRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckUserExistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.CheckUserExistRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.CheckUserExistRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.CheckUserExistRsp)
  return false;
#undef DO_
}

void CheckUserExistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.CheckUserExistRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.CheckUserExistRsp)
}

::google::protobuf::uint8* CheckUserExistRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CheckUserExistRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CheckUserExistRsp)
  return target;
}

size_t CheckUserExistRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CheckUserExistRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserExistRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CheckUserExistRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserExistRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUserExistRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CheckUserExistRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CheckUserExistRsp)
    MergeFrom(*source);
  }
}

void CheckUserExistRsp::MergeFrom(const CheckUserExistRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CheckUserExistRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckUserExistRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CheckUserExistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistRsp::CopyFrom(const CheckUserExistRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CheckUserExistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistRsp::IsInitialized() const {
  return true;
}

void CheckUserExistRsp::Swap(CheckUserExistRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserExistRsp::InternalSwap(CheckUserExistRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckUserExistRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerToUserReq::InitAsDefaultInstance() {
  ::ssp::_ServerToUserReq_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
  ::ssp::_ServerToUserReq_default_instance_._instance.get_mutable()->get_user_id_ = const_cast< ::ssp::GetUserIdByNameReq*>(
      ::ssp::GetUserIdByNameReq::internal_default_instance());
  ::ssp::_ServerToUserReq_default_instance_._instance.get_mutable()->create_user_ = const_cast< ::ssp::CreateUserReq*>(
      ::ssp::CreateUserReq::internal_default_instance());
  ::ssp::_ServerToUserReq_default_instance_._instance.get_mutable()->login_check_ = const_cast< ::ssp::LoginCheckReq*>(
      ::ssp::LoginCheckReq::internal_default_instance());
  ::ssp::_ServerToUserReq_default_instance_._instance.get_mutable()->check_user_exist_ = const_cast< ::ssp::CheckUserExistReq*>(
      ::ssp::CheckUserExistReq::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerToUserReq::kHeaderFieldNumber;
const int ServerToUserReq::kGetUserIdFieldNumber;
const int ServerToUserReq::kCreateUserFieldNumber;
const int ServerToUserReq::kLoginCheckFieldNumber;
const int ServerToUserReq::kCheckUserExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerToUserReq::ServerToUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_ServerToUserReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.ServerToUserReq)
}
ServerToUserReq::ServerToUserReq(const ServerToUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_get_user_id()) {
    get_user_id_ = new ::ssp::GetUserIdByNameReq(*from.get_user_id_);
  } else {
    get_user_id_ = NULL;
  }
  if (from.has_create_user()) {
    create_user_ = new ::ssp::CreateUserReq(*from.create_user_);
  } else {
    create_user_ = NULL;
  }
  if (from.has_login_check()) {
    login_check_ = new ::ssp::LoginCheckReq(*from.login_check_);
  } else {
    login_check_ = NULL;
  }
  if (from.has_check_user_exist()) {
    check_user_exist_ = new ::ssp::CheckUserExistReq(*from.check_user_exist_);
  } else {
    check_user_exist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.ServerToUserReq)
}

void ServerToUserReq::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_user_exist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(check_user_exist_));
}

ServerToUserReq::~ServerToUserReq() {
  // @@protoc_insertion_point(destructor:ssp.ServerToUserReq)
  SharedDtor();
}

void ServerToUserReq::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete get_user_id_;
  if (this != internal_default_instance()) delete create_user_;
  if (this != internal_default_instance()) delete login_check_;
  if (this != internal_default_instance()) delete check_user_exist_;
}

void ServerToUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerToUserReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerToUserReq& ServerToUserReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_ServerToUserReq.base);
  return *internal_default_instance();
}


void ServerToUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.ServerToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_user_id_ != NULL);
      get_user_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(create_user_ != NULL);
      create_user_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(login_check_ != NULL);
      login_check_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(check_user_exist_ != NULL);
      check_user_exist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerToUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.ServerToUserReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetUserIdByNameReq get_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.CreateUserReq create_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LoginCheckReq login_check = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.CheckUserExistReq check_user_exist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_user_exist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.ServerToUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.ServerToUserReq)
  return false;
#undef DO_
}

void ServerToUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.ServerToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_user_id(), output);
  }

  // optional .ssp.CreateUserReq create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_create_user(), output);
  }

  // optional .ssp.LoginCheckReq login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_login_check(), output);
  }

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_check_user_exist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.ServerToUserReq)
}

::google::protobuf::uint8* ServerToUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.ServerToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_user_id(), deterministic, target);
  }

  // optional .ssp.CreateUserReq create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_create_user(), deterministic, target);
  }

  // optional .ssp.LoginCheckReq login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_login_check(), deterministic, target);
  }

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_check_user_exist(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.ServerToUserReq)
  return target;
}

size_t ServerToUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.ServerToUserReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.GetUserIdByNameReq get_user_id = 2;
    if (has_get_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_user_id_);
    }

    // optional .ssp.CreateUserReq create_user = 3;
    if (has_create_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *create_user_);
    }

    // optional .ssp.LoginCheckReq login_check = 4;
    if (has_login_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *login_check_);
    }

    // optional .ssp.CheckUserExistReq check_user_exist = 5;
    if (has_check_user_exist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *check_user_exist_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.ServerToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerToUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.ServerToUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.ServerToUserReq)
    MergeFrom(*source);
  }
}

void ServerToUserReq::MergeFrom(const ServerToUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.ServerToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get_user_id()->::ssp::GetUserIdByNameReq::MergeFrom(from.get_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_create_user()->::ssp::CreateUserReq::MergeFrom(from.create_user());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_login_check()->::ssp::LoginCheckReq::MergeFrom(from.login_check());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_check_user_exist()->::ssp::CheckUserExistReq::MergeFrom(from.check_user_exist());
    }
  }
}

void ServerToUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.ServerToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserReq::CopyFrom(const ServerToUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.ServerToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserReq::IsInitialized() const {
  return true;
}

void ServerToUserReq::Swap(ServerToUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerToUserReq::InternalSwap(ServerToUserReq* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(get_user_id_, other->get_user_id_);
  swap(create_user_, other->create_user_);
  swap(login_check_, other->login_check_);
  swap(check_user_exist_, other->check_user_exist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerToUserReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserToServerRsp::InitAsDefaultInstance() {
  ::ssp::_UserToServerRsp_default_instance_._instance.get_mutable()->header_ = const_cast< ::ssp::MsgHeader*>(
      ::ssp::MsgHeader::internal_default_instance());
  ::ssp::_UserToServerRsp_default_instance_._instance.get_mutable()->get_user_id_ = const_cast< ::ssp::GetUserIdByNameRsp*>(
      ::ssp::GetUserIdByNameRsp::internal_default_instance());
  ::ssp::_UserToServerRsp_default_instance_._instance.get_mutable()->create_user_ = const_cast< ::ssp::CreateUserRsp*>(
      ::ssp::CreateUserRsp::internal_default_instance());
  ::ssp::_UserToServerRsp_default_instance_._instance.get_mutable()->login_check_ = const_cast< ::ssp::LoginCheckRsp*>(
      ::ssp::LoginCheckRsp::internal_default_instance());
  ::ssp::_UserToServerRsp_default_instance_._instance.get_mutable()->check_user_exist_ = const_cast< ::ssp::CheckUserExistRsp*>(
      ::ssp::CheckUserExistRsp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserToServerRsp::kHeaderFieldNumber;
const int UserToServerRsp::kGetUserIdFieldNumber;
const int UserToServerRsp::kCreateUserFieldNumber;
const int UserToServerRsp::kLoginCheckFieldNumber;
const int UserToServerRsp::kCheckUserExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserToServerRsp::UserToServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_UserToServerRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.UserToServerRsp)
}
UserToServerRsp::UserToServerRsp(const UserToServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_get_user_id()) {
    get_user_id_ = new ::ssp::GetUserIdByNameRsp(*from.get_user_id_);
  } else {
    get_user_id_ = NULL;
  }
  if (from.has_create_user()) {
    create_user_ = new ::ssp::CreateUserRsp(*from.create_user_);
  } else {
    create_user_ = NULL;
  }
  if (from.has_login_check()) {
    login_check_ = new ::ssp::LoginCheckRsp(*from.login_check_);
  } else {
    login_check_ = NULL;
  }
  if (from.has_check_user_exist()) {
    check_user_exist_ = new ::ssp::CheckUserExistRsp(*from.check_user_exist_);
  } else {
    check_user_exist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.UserToServerRsp)
}

void UserToServerRsp::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_user_exist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(check_user_exist_));
}

UserToServerRsp::~UserToServerRsp() {
  // @@protoc_insertion_point(destructor:ssp.UserToServerRsp)
  SharedDtor();
}

void UserToServerRsp::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete get_user_id_;
  if (this != internal_default_instance()) delete create_user_;
  if (this != internal_default_instance()) delete login_check_;
  if (this != internal_default_instance()) delete check_user_exist_;
}

void UserToServerRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserToServerRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserToServerRsp& UserToServerRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_UserToServerRsp.base);
  return *internal_default_instance();
}


void UserToServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.UserToServerRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_user_id_ != NULL);
      get_user_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(create_user_ != NULL);
      create_user_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(login_check_ != NULL);
      login_check_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(check_user_exist_ != NULL);
      check_user_exist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserToServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.UserToServerRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.CreateUserRsp create_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.LoginCheckRsp login_check = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.CheckUserExistRsp check_user_exist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_user_exist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.UserToServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.UserToServerRsp)
  return false;
#undef DO_
}

void UserToServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.UserToServerRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_user_id(), output);
  }

  // optional .ssp.CreateUserRsp create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_create_user(), output);
  }

  // optional .ssp.LoginCheckRsp login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_login_check(), output);
  }

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_check_user_exist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.UserToServerRsp)
}

::google::protobuf::uint8* UserToServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.UserToServerRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_user_id(), deterministic, target);
  }

  // optional .ssp.CreateUserRsp create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_create_user(), deterministic, target);
  }

  // optional .ssp.LoginCheckRsp login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_login_check(), deterministic, target);
  }

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_check_user_exist(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.UserToServerRsp)
  return target;
}

size_t UserToServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.UserToServerRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
    if (has_get_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_user_id_);
    }

    // optional .ssp.CreateUserRsp create_user = 3;
    if (has_create_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *create_user_);
    }

    // optional .ssp.LoginCheckRsp login_check = 4;
    if (has_login_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *login_check_);
    }

    // optional .ssp.CheckUserExistRsp check_user_exist = 5;
    if (has_check_user_exist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *check_user_exist_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.UserToServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserToServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.UserToServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.UserToServerRsp)
    MergeFrom(*source);
  }
}

void UserToServerRsp::MergeFrom(const UserToServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.UserToServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get_user_id()->::ssp::GetUserIdByNameRsp::MergeFrom(from.get_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_create_user()->::ssp::CreateUserRsp::MergeFrom(from.create_user());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_login_check()->::ssp::LoginCheckRsp::MergeFrom(from.login_check());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_check_user_exist()->::ssp::CheckUserExistRsp::MergeFrom(from.check_user_exist());
    }
  }
}

void UserToServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.UserToServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerRsp::CopyFrom(const UserToServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.UserToServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerRsp::IsInitialized() const {
  return true;
}

void UserToServerRsp::Swap(UserToServerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserToServerRsp::InternalSwap(UserToServerRsp* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(get_user_id_, other->get_user_id_);
  swap(create_user_, other->create_user_);
  swap(login_check_, other->login_check_);
  swap(check_user_exist_, other->check_user_exist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserToServerRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ssp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::MsgHeader* Arena::CreateMaybeMessage< ::ssp::MsgHeader >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::MsgHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::RegReq* Arena::CreateMaybeMessage< ::ssp::RegReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::RegReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::RegRsp* Arena::CreateMaybeMessage< ::ssp::RegRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::RegRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginReq* Arena::CreateMaybeMessage< ::ssp::LoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginRsp* Arena::CreateMaybeMessage< ::ssp::LoginRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LogoutReq* Arena::CreateMaybeMessage< ::ssp::LogoutReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LogoutReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LogoutRsp* Arena::CreateMaybeMessage< ::ssp::LogoutRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LogoutRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddFriendReq* Arena::CreateMaybeMessage< ::ssp::AddFriendReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddFriendReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddFriendRsp* Arena::CreateMaybeMessage< ::ssp::AddFriendRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddFriendRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelFriendReq* Arena::CreateMaybeMessage< ::ssp::DelFriendReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelFriendReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelFriendRsp* Arena::CreateMaybeMessage< ::ssp::DelFriendRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelFriendRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::PublishMessageReq* Arena::CreateMaybeMessage< ::ssp::PublishMessageReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::PublishMessageReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::PublishMessageRsp* Arena::CreateMaybeMessage< ::ssp::PublishMessageRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::PublishMessageRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetMessageListReq* Arena::CreateMaybeMessage< ::ssp::GetMessageListReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetMessageListReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::MessageItem* Arena::CreateMaybeMessage< ::ssp::MessageItem >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::MessageItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetMessageListRsp* Arena::CreateMaybeMessage< ::ssp::GetMessageListRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetMessageListRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetPhotoReq* Arena::CreateMaybeMessage< ::ssp::GetPhotoReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetPhotoReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetPhotoRsp* Arena::CreateMaybeMessage< ::ssp::GetPhotoRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetPhotoRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CommonReq* Arena::CreateMaybeMessage< ::ssp::CommonReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CommonReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CommonRsp* Arena::CreateMaybeMessage< ::ssp::CommonRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CommonRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetUserIdByNameReq* Arena::CreateMaybeMessage< ::ssp::GetUserIdByNameReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetUserIdByNameReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetUserIdByNameRsp* Arena::CreateMaybeMessage< ::ssp::GetUserIdByNameRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetUserIdByNameRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CreateUserReq* Arena::CreateMaybeMessage< ::ssp::CreateUserReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CreateUserReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CreateUserRsp* Arena::CreateMaybeMessage< ::ssp::CreateUserRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CreateUserRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginCheckReq* Arena::CreateMaybeMessage< ::ssp::LoginCheckReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginCheckReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginCheckRsp* Arena::CreateMaybeMessage< ::ssp::LoginCheckRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginCheckRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CheckUserExistReq* Arena::CreateMaybeMessage< ::ssp::CheckUserExistReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CheckUserExistReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::CheckUserExistRsp* Arena::CreateMaybeMessage< ::ssp::CheckUserExistRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::CheckUserExistRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::ServerToUserReq* Arena::CreateMaybeMessage< ::ssp::ServerToUserReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::ServerToUserReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::UserToServerRsp* Arena::CreateMaybeMessage< ::ssp::UserToServerRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::UserToServerRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
