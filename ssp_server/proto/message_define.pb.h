// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#ifndef PROTOBUF_INCLUDED_message_5fdefine_2eproto
#define PROTOBUF_INCLUDED_message_5fdefine_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto 

namespace protobuf_message_5fdefine_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[30];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_5fdefine_2eproto
namespace ssp {
class AddFriendReq;
class AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
class AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class CheckUserExistReq;
class CheckUserExistReqDefaultTypeInternal;
extern CheckUserExistReqDefaultTypeInternal _CheckUserExistReq_default_instance_;
class CheckUserExistRsp;
class CheckUserExistRspDefaultTypeInternal;
extern CheckUserExistRspDefaultTypeInternal _CheckUserExistRsp_default_instance_;
class CommonReq;
class CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
class CommonRsp;
class CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class CreateUserReq;
class CreateUserReqDefaultTypeInternal;
extern CreateUserReqDefaultTypeInternal _CreateUserReq_default_instance_;
class CreateUserRsp;
class CreateUserRspDefaultTypeInternal;
extern CreateUserRspDefaultTypeInternal _CreateUserRsp_default_instance_;
class DelFriendReq;
class DelFriendReqDefaultTypeInternal;
extern DelFriendReqDefaultTypeInternal _DelFriendReq_default_instance_;
class DelFriendRsp;
class DelFriendRspDefaultTypeInternal;
extern DelFriendRspDefaultTypeInternal _DelFriendRsp_default_instance_;
class GetMessageListReq;
class GetMessageListReqDefaultTypeInternal;
extern GetMessageListReqDefaultTypeInternal _GetMessageListReq_default_instance_;
class GetMessageListRsp;
class GetMessageListRspDefaultTypeInternal;
extern GetMessageListRspDefaultTypeInternal _GetMessageListRsp_default_instance_;
class GetPhotoReq;
class GetPhotoReqDefaultTypeInternal;
extern GetPhotoReqDefaultTypeInternal _GetPhotoReq_default_instance_;
class GetPhotoRsp;
class GetPhotoRspDefaultTypeInternal;
extern GetPhotoRspDefaultTypeInternal _GetPhotoRsp_default_instance_;
class GetUserIdByNameReq;
class GetUserIdByNameReqDefaultTypeInternal;
extern GetUserIdByNameReqDefaultTypeInternal _GetUserIdByNameReq_default_instance_;
class GetUserIdByNameRsp;
class GetUserIdByNameRspDefaultTypeInternal;
extern GetUserIdByNameRspDefaultTypeInternal _GetUserIdByNameRsp_default_instance_;
class LoginCheckReq;
class LoginCheckReqDefaultTypeInternal;
extern LoginCheckReqDefaultTypeInternal _LoginCheckReq_default_instance_;
class LoginCheckRsp;
class LoginCheckRspDefaultTypeInternal;
extern LoginCheckRspDefaultTypeInternal _LoginCheckRsp_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class LogoutReq;
class LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutRsp;
class LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class MessageItem;
class MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class MsgHeader;
class MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class PublishMessageReq;
class PublishMessageReqDefaultTypeInternal;
extern PublishMessageReqDefaultTypeInternal _PublishMessageReq_default_instance_;
class PublishMessageRsp;
class PublishMessageRspDefaultTypeInternal;
extern PublishMessageRspDefaultTypeInternal _PublishMessageRsp_default_instance_;
class RegReq;
class RegReqDefaultTypeInternal;
extern RegReqDefaultTypeInternal _RegReq_default_instance_;
class RegRsp;
class RegRspDefaultTypeInternal;
extern RegRspDefaultTypeInternal _RegRsp_default_instance_;
class ServerToUserReq;
class ServerToUserReqDefaultTypeInternal;
extern ServerToUserReqDefaultTypeInternal _ServerToUserReq_default_instance_;
class UserToServerRsp;
class UserToServerRspDefaultTypeInternal;
extern UserToServerRspDefaultTypeInternal _UserToServerRsp_default_instance_;
}  // namespace ssp
namespace google {
namespace protobuf {
template<> ::ssp::AddFriendReq* Arena::CreateMaybeMessage<::ssp::AddFriendReq>(Arena*);
template<> ::ssp::AddFriendRsp* Arena::CreateMaybeMessage<::ssp::AddFriendRsp>(Arena*);
template<> ::ssp::CheckUserExistReq* Arena::CreateMaybeMessage<::ssp::CheckUserExistReq>(Arena*);
template<> ::ssp::CheckUserExistRsp* Arena::CreateMaybeMessage<::ssp::CheckUserExistRsp>(Arena*);
template<> ::ssp::CommonReq* Arena::CreateMaybeMessage<::ssp::CommonReq>(Arena*);
template<> ::ssp::CommonRsp* Arena::CreateMaybeMessage<::ssp::CommonRsp>(Arena*);
template<> ::ssp::CreateUserReq* Arena::CreateMaybeMessage<::ssp::CreateUserReq>(Arena*);
template<> ::ssp::CreateUserRsp* Arena::CreateMaybeMessage<::ssp::CreateUserRsp>(Arena*);
template<> ::ssp::DelFriendReq* Arena::CreateMaybeMessage<::ssp::DelFriendReq>(Arena*);
template<> ::ssp::DelFriendRsp* Arena::CreateMaybeMessage<::ssp::DelFriendRsp>(Arena*);
template<> ::ssp::GetMessageListReq* Arena::CreateMaybeMessage<::ssp::GetMessageListReq>(Arena*);
template<> ::ssp::GetMessageListRsp* Arena::CreateMaybeMessage<::ssp::GetMessageListRsp>(Arena*);
template<> ::ssp::GetPhotoReq* Arena::CreateMaybeMessage<::ssp::GetPhotoReq>(Arena*);
template<> ::ssp::GetPhotoRsp* Arena::CreateMaybeMessage<::ssp::GetPhotoRsp>(Arena*);
template<> ::ssp::GetUserIdByNameReq* Arena::CreateMaybeMessage<::ssp::GetUserIdByNameReq>(Arena*);
template<> ::ssp::GetUserIdByNameRsp* Arena::CreateMaybeMessage<::ssp::GetUserIdByNameRsp>(Arena*);
template<> ::ssp::LoginCheckReq* Arena::CreateMaybeMessage<::ssp::LoginCheckReq>(Arena*);
template<> ::ssp::LoginCheckRsp* Arena::CreateMaybeMessage<::ssp::LoginCheckRsp>(Arena*);
template<> ::ssp::LoginReq* Arena::CreateMaybeMessage<::ssp::LoginReq>(Arena*);
template<> ::ssp::LoginRsp* Arena::CreateMaybeMessage<::ssp::LoginRsp>(Arena*);
template<> ::ssp::LogoutReq* Arena::CreateMaybeMessage<::ssp::LogoutReq>(Arena*);
template<> ::ssp::LogoutRsp* Arena::CreateMaybeMessage<::ssp::LogoutRsp>(Arena*);
template<> ::ssp::MessageItem* Arena::CreateMaybeMessage<::ssp::MessageItem>(Arena*);
template<> ::ssp::MsgHeader* Arena::CreateMaybeMessage<::ssp::MsgHeader>(Arena*);
template<> ::ssp::PublishMessageReq* Arena::CreateMaybeMessage<::ssp::PublishMessageReq>(Arena*);
template<> ::ssp::PublishMessageRsp* Arena::CreateMaybeMessage<::ssp::PublishMessageRsp>(Arena*);
template<> ::ssp::RegReq* Arena::CreateMaybeMessage<::ssp::RegReq>(Arena*);
template<> ::ssp::RegRsp* Arena::CreateMaybeMessage<::ssp::RegRsp>(Arena*);
template<> ::ssp::ServerToUserReq* Arena::CreateMaybeMessage<::ssp::ServerToUserReq>(Arena*);
template<> ::ssp::UserToServerRsp* Arena::CreateMaybeMessage<::ssp::UserToServerRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssp {

// ===================================================================

class MsgHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.MsgHeader) */ {
 public:
  MsgHeader();
  virtual ~MsgHeader();

  MsgHeader(const MsgHeader& from);

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MsgHeader* other);
  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgHeader* New() const final {
    return CreateMaybeMessage<MsgHeader>(NULL);
  }

  MsgHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  bool has_ver() const;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::uint32 ver() const;
  void set_ver(::google::protobuf::uint32 value);

  // optional uint32 cmd_type = 2;
  bool has_cmd_type() const;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  ::google::protobuf::uint32 cmd_type() const;
  void set_cmd_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.MsgHeader)
 private:
  void set_has_ver();
  void clear_has_ver();
  void set_has_cmd_type();
  void clear_has_cmd_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 cmd_type_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.RegReq) */ {
 public:
  RegReq();
  virtual ~RegReq();

  RegReq(const RegReq& from);

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegReq(RegReq&& from) noexcept
    : RegReq() {
    *this = ::std::move(from);
  }

  inline RegReq& operator=(RegReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegReq* internal_default_instance() {
    return reinterpret_cast<const RegReq*>(
               &_RegReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegReq* other);
  friend void swap(RegReq& a, RegReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegReq* New() const final {
    return CreateMaybeMessage<RegReq>(NULL);
  }

  RegReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegReq& from);
  void MergeFrom(const RegReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 3;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 from = 5;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 5;
  ::google::protobuf::uint32 from() const;
  void set_from(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.RegReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();
  void set_has_from();
  void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 from_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.RegRsp) */ {
 public:
  RegRsp();
  virtual ~RegRsp();

  RegRsp(const RegRsp& from);

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegRsp(RegRsp&& from) noexcept
    : RegRsp() {
    *this = ::std::move(from);
  }

  inline RegRsp& operator=(RegRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegRsp* internal_default_instance() {
    return reinterpret_cast<const RegRsp*>(
               &_RegRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegRsp* other);
  friend void swap(RegRsp& a, RegRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegRsp* New() const final {
    return CreateMaybeMessage<RegRsp>(NULL);
  }

  RegRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegRsp& from);
  void MergeFrom(const RegRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 3;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // optional uint32 user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.RegRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginReq* other);
  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(NULL);
  }

  LoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 3;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // @@protoc_insertion_point(class_scope:ssp.LoginReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::ssp::MsgHeader* header_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LoginRsp* other);
  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(NULL);
  }

  LoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 3;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 3;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // optional uint32 user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.LoginRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LogoutReq) */ {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutReq(LogoutReq&& from) noexcept
    : LogoutReq() {
    *this = ::std::move(from);
  }

  inline LogoutReq& operator=(LogoutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LogoutReq* other);
  friend void swap(LogoutReq& a, LogoutReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutReq* New() const final {
    return CreateMaybeMessage<LogoutReq>(NULL);
  }

  LogoutReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.LogoutReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LogoutRsp) */ {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRsp(LogoutRsp&& from) noexcept
    : LogoutRsp() {
    *this = ::std::move(from);
  }

  inline LogoutRsp& operator=(LogoutRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LogoutRsp* other);
  friend void swap(LogoutRsp& a, LogoutRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRsp* New() const final {
    return CreateMaybeMessage<LogoutRsp>(NULL);
  }

  LogoutRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // optional uint32 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.LogoutRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFriendReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.AddFriendReq) */ {
 public:
  AddFriendReq();
  virtual ~AddFriendReq();

  AddFriendReq(const AddFriendReq& from);

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFriendReq(AddFriendReq&& from) noexcept
    : AddFriendReq() {
    *this = ::std::move(from);
  }

  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
               &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AddFriendReq* other);
  friend void swap(AddFriendReq& a, AddFriendReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFriendReq* New() const final {
    return CreateMaybeMessage<AddFriendReq>(NULL);
  }

  AddFriendReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFriendReq& from);
  void MergeFrom(const AddFriendReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 other_id = 3;
  bool has_other_id() const;
  void clear_other_id();
  static const int kOtherIdFieldNumber = 3;
  ::google::protobuf::uint32 other_id() const;
  void set_other_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_other_id();
  void clear_has_other_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 other_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFriendRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.AddFriendRsp) */ {
 public:
  AddFriendRsp();
  virtual ~AddFriendRsp();

  AddFriendRsp(const AddFriendRsp& from);

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFriendRsp(AddFriendRsp&& from) noexcept
    : AddFriendRsp() {
    *this = ::std::move(from);
  }

  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
               &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddFriendRsp* other);
  friend void swap(AddFriendRsp& a, AddFriendRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFriendRsp* New() const final {
    return CreateMaybeMessage<AddFriendRsp>(NULL);
  }

  AddFriendRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFriendRsp& from);
  void MergeFrom(const AddFriendRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelFriendReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.DelFriendReq) */ {
 public:
  DelFriendReq();
  virtual ~DelFriendReq();

  DelFriendReq(const DelFriendReq& from);

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelFriendReq(DelFriendReq&& from) noexcept
    : DelFriendReq() {
    *this = ::std::move(from);
  }

  inline DelFriendReq& operator=(DelFriendReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelFriendReq* internal_default_instance() {
    return reinterpret_cast<const DelFriendReq*>(
               &_DelFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DelFriendReq* other);
  friend void swap(DelFriendReq& a, DelFriendReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelFriendReq* New() const final {
    return CreateMaybeMessage<DelFriendReq>(NULL);
  }

  DelFriendReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelFriendReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelFriendReq& from);
  void MergeFrom(const DelFriendReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 other_id = 3;
  bool has_other_id() const;
  void clear_other_id();
  static const int kOtherIdFieldNumber = 3;
  ::google::protobuf::uint32 other_id() const;
  void set_other_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_other_id();
  void clear_has_other_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 other_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelFriendRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.DelFriendRsp) */ {
 public:
  DelFriendRsp();
  virtual ~DelFriendRsp();

  DelFriendRsp(const DelFriendRsp& from);

  inline DelFriendRsp& operator=(const DelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelFriendRsp(DelFriendRsp&& from) noexcept
    : DelFriendRsp() {
    *this = ::std::move(from);
  }

  inline DelFriendRsp& operator=(DelFriendRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelFriendRsp* internal_default_instance() {
    return reinterpret_cast<const DelFriendRsp*>(
               &_DelFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DelFriendRsp* other);
  friend void swap(DelFriendRsp& a, DelFriendRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelFriendRsp* New() const final {
    return CreateMaybeMessage<DelFriendRsp>(NULL);
  }

  DelFriendRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelFriendRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelFriendRsp& from);
  void MergeFrom(const DelFriendRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.PublishMessageReq) */ {
 public:
  PublishMessageReq();
  virtual ~PublishMessageReq();

  PublishMessageReq(const PublishMessageReq& from);

  inline PublishMessageReq& operator=(const PublishMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishMessageReq(PublishMessageReq&& from) noexcept
    : PublishMessageReq() {
    *this = ::std::move(from);
  }

  inline PublishMessageReq& operator=(PublishMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishMessageReq* internal_default_instance() {
    return reinterpret_cast<const PublishMessageReq*>(
               &_PublishMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PublishMessageReq* other);
  friend void swap(PublishMessageReq& a, PublishMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishMessageReq* New() const final {
    return CreateMaybeMessage<PublishMessageReq>(NULL);
  }

  PublishMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishMessageReq& from);
  void MergeFrom(const PublishMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_content();
  void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishMessageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.PublishMessageRsp) */ {
 public:
  PublishMessageRsp();
  virtual ~PublishMessageRsp();

  PublishMessageRsp(const PublishMessageRsp& from);

  inline PublishMessageRsp& operator=(const PublishMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishMessageRsp(PublishMessageRsp&& from) noexcept
    : PublishMessageRsp() {
    *this = ::std::move(from);
  }

  inline PublishMessageRsp& operator=(PublishMessageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishMessageRsp* internal_default_instance() {
    return reinterpret_cast<const PublishMessageRsp*>(
               &_PublishMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PublishMessageRsp* other);
  friend void swap(PublishMessageRsp& a, PublishMessageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishMessageRsp* New() const final {
    return CreateMaybeMessage<PublishMessageRsp>(NULL);
  }

  PublishMessageRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishMessageRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishMessageRsp& from);
  void MergeFrom(const PublishMessageRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessageListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetMessageListReq) */ {
 public:
  GetMessageListReq();
  virtual ~GetMessageListReq();

  GetMessageListReq(const GetMessageListReq& from);

  inline GetMessageListReq& operator=(const GetMessageListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessageListReq(GetMessageListReq&& from) noexcept
    : GetMessageListReq() {
    *this = ::std::move(from);
  }

  inline GetMessageListReq& operator=(GetMessageListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageListReq* internal_default_instance() {
    return reinterpret_cast<const GetMessageListReq*>(
               &_GetMessageListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetMessageListReq* other);
  friend void swap(GetMessageListReq& a, GetMessageListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessageListReq* New() const final {
    return CreateMaybeMessage<GetMessageListReq>(NULL);
  }

  GetMessageListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMessageListReq& from);
  void MergeFrom(const GetMessageListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetMessageListReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.MessageItem) */ {
 public:
  MessageItem();
  virtual ~MessageItem();

  MessageItem(const MessageItem& from);

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MessageItem* other);
  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageItem* New() const final {
    return CreateMaybeMessage<MessageItem>(NULL);
  }

  MessageItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageItem& from);
  void MergeFrom(const MessageItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint32 publisher_id = 1;
  bool has_publisher_id() const;
  void clear_publisher_id();
  static const int kPublisherIdFieldNumber = 1;
  ::google::protobuf::uint32 publisher_id() const;
  void set_publisher_id(::google::protobuf::uint32 value);

  // optional uint32 publish_time = 2;
  bool has_publish_time() const;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 2;
  ::google::protobuf::uint32 publish_time() const;
  void set_publish_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.MessageItem)
 private:
  void set_has_publisher_id();
  void clear_has_publisher_id();
  void set_has_publish_time();
  void clear_has_publish_time();
  void set_has_content();
  void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 publisher_id_;
  ::google::protobuf::uint32 publish_time_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessageListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetMessageListRsp) */ {
 public:
  GetMessageListRsp();
  virtual ~GetMessageListRsp();

  GetMessageListRsp(const GetMessageListRsp& from);

  inline GetMessageListRsp& operator=(const GetMessageListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessageListRsp(GetMessageListRsp&& from) noexcept
    : GetMessageListRsp() {
    *this = ::std::move(from);
  }

  inline GetMessageListRsp& operator=(GetMessageListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageListRsp* internal_default_instance() {
    return reinterpret_cast<const GetMessageListRsp*>(
               &_GetMessageListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GetMessageListRsp* other);
  friend void swap(GetMessageListRsp& a, GetMessageListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessageListRsp* New() const final {
    return CreateMaybeMessage<GetMessageListRsp>(NULL);
  }

  GetMessageListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMessageListRsp& from);
  void MergeFrom(const GetMessageListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssp.MessageItem message_list = 3;
  int message_list_size() const;
  void clear_message_list();
  static const int kMessageListFieldNumber = 3;
  ::ssp::MessageItem* mutable_message_list(int index);
  ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >*
      mutable_message_list();
  const ::ssp::MessageItem& message_list(int index) const;
  ::ssp::MessageItem* add_message_list();
  const ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >&
      message_list() const;

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetMessageListRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem > message_list_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPhotoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetPhotoReq) */ {
 public:
  GetPhotoReq();
  virtual ~GetPhotoReq();

  GetPhotoReq(const GetPhotoReq& from);

  inline GetPhotoReq& operator=(const GetPhotoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPhotoReq(GetPhotoReq&& from) noexcept
    : GetPhotoReq() {
    *this = ::std::move(from);
  }

  inline GetPhotoReq& operator=(GetPhotoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPhotoReq* internal_default_instance() {
    return reinterpret_cast<const GetPhotoReq*>(
               &_GetPhotoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GetPhotoReq* other);
  friend void swap(GetPhotoReq& a, GetPhotoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPhotoReq* New() const final {
    return CreateMaybeMessage<GetPhotoReq>(NULL);
  }

  GetPhotoReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPhotoReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPhotoReq& from);
  void MergeFrom(const GetPhotoReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPhotoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetPhotoRsp) */ {
 public:
  GetPhotoRsp();
  virtual ~GetPhotoRsp();

  GetPhotoRsp(const GetPhotoRsp& from);

  inline GetPhotoRsp& operator=(const GetPhotoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPhotoRsp(GetPhotoRsp&& from) noexcept
    : GetPhotoRsp() {
    *this = ::std::move(from);
  }

  inline GetPhotoRsp& operator=(GetPhotoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPhotoRsp* internal_default_instance() {
    return reinterpret_cast<const GetPhotoRsp*>(
               &_GetPhotoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GetPhotoRsp* other);
  friend void swap(GetPhotoRsp& a, GetPhotoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPhotoRsp* New() const final {
    return CreateMaybeMessage<GetPhotoRsp>(NULL);
  }

  GetPhotoRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPhotoRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPhotoRsp& from);
  void MergeFrom(const GetPhotoRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string last_publisher_name = 4;
  bool has_last_publisher_name() const;
  void clear_last_publisher_name();
  static const int kLastPublisherNameFieldNumber = 4;
  const ::std::string& last_publisher_name() const;
  void set_last_publisher_name(const ::std::string& value);
  #if LANG_CXX11
  void set_last_publisher_name(::std::string&& value);
  #endif
  void set_last_publisher_name(const char* value);
  void set_last_publisher_name(const char* value, size_t size);
  ::std::string* mutable_last_publisher_name();
  ::std::string* release_last_publisher_name();
  void set_allocated_last_publisher_name(::std::string* last_publisher_name);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // optional uint32 last_publisher_id = 3;
  bool has_last_publisher_id() const;
  void clear_last_publisher_id();
  static const int kLastPublisherIdFieldNumber = 3;
  ::google::protobuf::uint32 last_publisher_id() const;
  void set_last_publisher_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_last_publisher_id();
  void clear_has_last_publisher_id();
  void set_has_last_publisher_name();
  void clear_has_last_publisher_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr last_publisher_name_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 last_publisher_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CommonReq) */ {
 public:
  CommonReq();
  virtual ~CommonReq();

  CommonReq(const CommonReq& from);

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CommonReq* other);
  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonReq* New() const final {
    return CreateMaybeMessage<CommonReq>(NULL);
  }

  CommonReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonReq& from);
  void MergeFrom(const CommonReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.RegReq reg_req = 2;
  bool has_reg_req() const;
  void clear_reg_req();
  static const int kRegReqFieldNumber = 2;
  private:
  const ::ssp::RegReq& _internal_reg_req() const;
  public:
  const ::ssp::RegReq& reg_req() const;
  ::ssp::RegReq* release_reg_req();
  ::ssp::RegReq* mutable_reg_req();
  void set_allocated_reg_req(::ssp::RegReq* reg_req);

  // optional .ssp.LoginReq login_req = 3;
  bool has_login_req() const;
  void clear_login_req();
  static const int kLoginReqFieldNumber = 3;
  private:
  const ::ssp::LoginReq& _internal_login_req() const;
  public:
  const ::ssp::LoginReq& login_req() const;
  ::ssp::LoginReq* release_login_req();
  ::ssp::LoginReq* mutable_login_req();
  void set_allocated_login_req(::ssp::LoginReq* login_req);

  // optional .ssp.LogoutReq logout_req = 4;
  bool has_logout_req() const;
  void clear_logout_req();
  static const int kLogoutReqFieldNumber = 4;
  private:
  const ::ssp::LogoutReq& _internal_logout_req() const;
  public:
  const ::ssp::LogoutReq& logout_req() const;
  ::ssp::LogoutReq* release_logout_req();
  ::ssp::LogoutReq* mutable_logout_req();
  void set_allocated_logout_req(::ssp::LogoutReq* logout_req);

  // optional .ssp.AddFriendReq add_friend_req = 5;
  bool has_add_friend_req() const;
  void clear_add_friend_req();
  static const int kAddFriendReqFieldNumber = 5;
  private:
  const ::ssp::AddFriendReq& _internal_add_friend_req() const;
  public:
  const ::ssp::AddFriendReq& add_friend_req() const;
  ::ssp::AddFriendReq* release_add_friend_req();
  ::ssp::AddFriendReq* mutable_add_friend_req();
  void set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req);

  // optional .ssp.DelFriendReq del_friend_req = 6;
  bool has_del_friend_req() const;
  void clear_del_friend_req();
  static const int kDelFriendReqFieldNumber = 6;
  private:
  const ::ssp::DelFriendReq& _internal_del_friend_req() const;
  public:
  const ::ssp::DelFriendReq& del_friend_req() const;
  ::ssp::DelFriendReq* release_del_friend_req();
  ::ssp::DelFriendReq* mutable_del_friend_req();
  void set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req);

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  bool has_publish_message_req() const;
  void clear_publish_message_req();
  static const int kPublishMessageReqFieldNumber = 7;
  private:
  const ::ssp::PublishMessageReq& _internal_publish_message_req() const;
  public:
  const ::ssp::PublishMessageReq& publish_message_req() const;
  ::ssp::PublishMessageReq* release_publish_message_req();
  ::ssp::PublishMessageReq* mutable_publish_message_req();
  void set_allocated_publish_message_req(::ssp::PublishMessageReq* publish_message_req);

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  bool has_get_message_list_req() const;
  void clear_get_message_list_req();
  static const int kGetMessageListReqFieldNumber = 8;
  private:
  const ::ssp::GetMessageListReq& _internal_get_message_list_req() const;
  public:
  const ::ssp::GetMessageListReq& get_message_list_req() const;
  ::ssp::GetMessageListReq* release_get_message_list_req();
  ::ssp::GetMessageListReq* mutable_get_message_list_req();
  void set_allocated_get_message_list_req(::ssp::GetMessageListReq* get_message_list_req);

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  bool has_get_photo_req() const;
  void clear_get_photo_req();
  static const int kGetPhotoReqFieldNumber = 9;
  private:
  const ::ssp::GetPhotoReq& _internal_get_photo_req() const;
  public:
  const ::ssp::GetPhotoReq& get_photo_req() const;
  ::ssp::GetPhotoReq* release_get_photo_req();
  ::ssp::GetPhotoReq* mutable_get_photo_req();
  void set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req);

  // @@protoc_insertion_point(class_scope:ssp.CommonReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reg_req();
  void clear_has_reg_req();
  void set_has_login_req();
  void clear_has_login_req();
  void set_has_logout_req();
  void clear_has_logout_req();
  void set_has_add_friend_req();
  void clear_has_add_friend_req();
  void set_has_del_friend_req();
  void clear_has_del_friend_req();
  void set_has_publish_message_req();
  void clear_has_publish_message_req();
  void set_has_get_message_list_req();
  void clear_has_get_message_list_req();
  void set_has_get_photo_req();
  void clear_has_get_photo_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::ssp::RegReq* reg_req_;
  ::ssp::LoginReq* login_req_;
  ::ssp::LogoutReq* logout_req_;
  ::ssp::AddFriendReq* add_friend_req_;
  ::ssp::DelFriendReq* del_friend_req_;
  ::ssp::PublishMessageReq* publish_message_req_;
  ::ssp::GetMessageListReq* get_message_list_req_;
  ::ssp::GetPhotoReq* get_photo_req_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CommonRsp) */ {
 public:
  CommonRsp();
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CommonRsp* other);
  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonRsp* New() const final {
    return CreateMaybeMessage<CommonRsp>(NULL);
  }

  CommonRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.RegRsp reg_rsp = 2;
  bool has_reg_rsp() const;
  void clear_reg_rsp();
  static const int kRegRspFieldNumber = 2;
  private:
  const ::ssp::RegRsp& _internal_reg_rsp() const;
  public:
  const ::ssp::RegRsp& reg_rsp() const;
  ::ssp::RegRsp* release_reg_rsp();
  ::ssp::RegRsp* mutable_reg_rsp();
  void set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp);

  // optional .ssp.LoginRsp login_rsp = 3;
  bool has_login_rsp() const;
  void clear_login_rsp();
  static const int kLoginRspFieldNumber = 3;
  private:
  const ::ssp::LoginRsp& _internal_login_rsp() const;
  public:
  const ::ssp::LoginRsp& login_rsp() const;
  ::ssp::LoginRsp* release_login_rsp();
  ::ssp::LoginRsp* mutable_login_rsp();
  void set_allocated_login_rsp(::ssp::LoginRsp* login_rsp);

  // optional .ssp.LogoutRsp logout_rsp = 4;
  bool has_logout_rsp() const;
  void clear_logout_rsp();
  static const int kLogoutRspFieldNumber = 4;
  private:
  const ::ssp::LogoutRsp& _internal_logout_rsp() const;
  public:
  const ::ssp::LogoutRsp& logout_rsp() const;
  ::ssp::LogoutRsp* release_logout_rsp();
  ::ssp::LogoutRsp* mutable_logout_rsp();
  void set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp);

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  bool has_add_friend_rsp() const;
  void clear_add_friend_rsp();
  static const int kAddFriendRspFieldNumber = 5;
  private:
  const ::ssp::AddFriendRsp& _internal_add_friend_rsp() const;
  public:
  const ::ssp::AddFriendRsp& add_friend_rsp() const;
  ::ssp::AddFriendRsp* release_add_friend_rsp();
  ::ssp::AddFriendRsp* mutable_add_friend_rsp();
  void set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp);

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  bool has_del_friend_rsp() const;
  void clear_del_friend_rsp();
  static const int kDelFriendRspFieldNumber = 6;
  private:
  const ::ssp::DelFriendRsp& _internal_del_friend_rsp() const;
  public:
  const ::ssp::DelFriendRsp& del_friend_rsp() const;
  ::ssp::DelFriendRsp* release_del_friend_rsp();
  ::ssp::DelFriendRsp* mutable_del_friend_rsp();
  void set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp);

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  bool has_publish_message_rsp() const;
  void clear_publish_message_rsp();
  static const int kPublishMessageRspFieldNumber = 7;
  private:
  const ::ssp::PublishMessageRsp& _internal_publish_message_rsp() const;
  public:
  const ::ssp::PublishMessageRsp& publish_message_rsp() const;
  ::ssp::PublishMessageRsp* release_publish_message_rsp();
  ::ssp::PublishMessageRsp* mutable_publish_message_rsp();
  void set_allocated_publish_message_rsp(::ssp::PublishMessageRsp* publish_message_rsp);

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  bool has_get_message_list_rsp() const;
  void clear_get_message_list_rsp();
  static const int kGetMessageListRspFieldNumber = 8;
  private:
  const ::ssp::GetMessageListRsp& _internal_get_message_list_rsp() const;
  public:
  const ::ssp::GetMessageListRsp& get_message_list_rsp() const;
  ::ssp::GetMessageListRsp* release_get_message_list_rsp();
  ::ssp::GetMessageListRsp* mutable_get_message_list_rsp();
  void set_allocated_get_message_list_rsp(::ssp::GetMessageListRsp* get_message_list_rsp);

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  bool has_get_photo_rsp() const;
  void clear_get_photo_rsp();
  static const int kGetPhotoRspFieldNumber = 9;
  private:
  const ::ssp::GetPhotoRsp& _internal_get_photo_rsp() const;
  public:
  const ::ssp::GetPhotoRsp& get_photo_rsp() const;
  ::ssp::GetPhotoRsp* release_get_photo_rsp();
  ::ssp::GetPhotoRsp* mutable_get_photo_rsp();
  void set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp);

  // @@protoc_insertion_point(class_scope:ssp.CommonRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reg_rsp();
  void clear_has_reg_rsp();
  void set_has_login_rsp();
  void clear_has_login_rsp();
  void set_has_logout_rsp();
  void clear_has_logout_rsp();
  void set_has_add_friend_rsp();
  void clear_has_add_friend_rsp();
  void set_has_del_friend_rsp();
  void clear_has_del_friend_rsp();
  void set_has_publish_message_rsp();
  void clear_has_publish_message_rsp();
  void set_has_get_message_list_rsp();
  void clear_has_get_message_list_rsp();
  void set_has_get_photo_rsp();
  void clear_has_get_photo_rsp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::ssp::RegRsp* reg_rsp_;
  ::ssp::LoginRsp* login_rsp_;
  ::ssp::LogoutRsp* logout_rsp_;
  ::ssp::AddFriendRsp* add_friend_rsp_;
  ::ssp::DelFriendRsp* del_friend_rsp_;
  ::ssp::PublishMessageRsp* publish_message_rsp_;
  ::ssp::GetMessageListRsp* get_message_list_rsp_;
  ::ssp::GetPhotoRsp* get_photo_rsp_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserIdByNameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetUserIdByNameReq) */ {
 public:
  GetUserIdByNameReq();
  virtual ~GetUserIdByNameReq();

  GetUserIdByNameReq(const GetUserIdByNameReq& from);

  inline GetUserIdByNameReq& operator=(const GetUserIdByNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserIdByNameReq(GetUserIdByNameReq&& from) noexcept
    : GetUserIdByNameReq() {
    *this = ::std::move(from);
  }

  inline GetUserIdByNameReq& operator=(GetUserIdByNameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserIdByNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserIdByNameReq* internal_default_instance() {
    return reinterpret_cast<const GetUserIdByNameReq*>(
               &_GetUserIdByNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GetUserIdByNameReq* other);
  friend void swap(GetUserIdByNameReq& a, GetUserIdByNameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserIdByNameReq* New() const final {
    return CreateMaybeMessage<GetUserIdByNameReq>(NULL);
  }

  GetUserIdByNameReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUserIdByNameReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUserIdByNameReq& from);
  void MergeFrom(const GetUserIdByNameReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserIdByNameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 2;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // @@protoc_insertion_point(class_scope:ssp.GetUserIdByNameReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_name();
  void clear_has_user_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::ssp::MsgHeader* header_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserIdByNameRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.GetUserIdByNameRsp) */ {
 public:
  GetUserIdByNameRsp();
  virtual ~GetUserIdByNameRsp();

  GetUserIdByNameRsp(const GetUserIdByNameRsp& from);

  inline GetUserIdByNameRsp& operator=(const GetUserIdByNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserIdByNameRsp(GetUserIdByNameRsp&& from) noexcept
    : GetUserIdByNameRsp() {
    *this = ::std::move(from);
  }

  inline GetUserIdByNameRsp& operator=(GetUserIdByNameRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserIdByNameRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserIdByNameRsp* internal_default_instance() {
    return reinterpret_cast<const GetUserIdByNameRsp*>(
               &_GetUserIdByNameRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GetUserIdByNameRsp* other);
  friend void swap(GetUserIdByNameRsp& a, GetUserIdByNameRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserIdByNameRsp* New() const final {
    return CreateMaybeMessage<GetUserIdByNameRsp>(NULL);
  }

  GetUserIdByNameRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUserIdByNameRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUserIdByNameRsp& from);
  void MergeFrom(const GetUserIdByNameRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserIdByNameRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetUserIdByNameRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CreateUserReq) */ {
 public:
  CreateUserReq();
  virtual ~CreateUserReq();

  CreateUserReq(const CreateUserReq& from);

  inline CreateUserReq& operator=(const CreateUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUserReq(CreateUserReq&& from) noexcept
    : CreateUserReq() {
    *this = ::std::move(from);
  }

  inline CreateUserReq& operator=(CreateUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserReq* internal_default_instance() {
    return reinterpret_cast<const CreateUserReq*>(
               &_CreateUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CreateUserReq* other);
  friend void swap(CreateUserReq& a, CreateUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUserReq* New() const final {
    return CreateMaybeMessage<CreateUserReq>(NULL);
  }

  CreateUserReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUserReq& from);
  void MergeFrom(const CreateUserReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 2;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 from = 4;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 4;
  ::google::protobuf::int32 from() const;
  void set_from(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.CreateUserReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();
  void set_has_from();
  void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 from_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateUserRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CreateUserRsp) */ {
 public:
  CreateUserRsp();
  virtual ~CreateUserRsp();

  CreateUserRsp(const CreateUserRsp& from);

  inline CreateUserRsp& operator=(const CreateUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUserRsp(CreateUserRsp&& from) noexcept
    : CreateUserRsp() {
    *this = ::std::move(from);
  }

  inline CreateUserRsp& operator=(CreateUserRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserRsp* internal_default_instance() {
    return reinterpret_cast<const CreateUserRsp*>(
               &_CreateUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CreateUserRsp* other);
  friend void swap(CreateUserRsp& a, CreateUserRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRsp* New() const final {
    return CreateMaybeMessage<CreateUserRsp>(NULL);
  }

  CreateUserRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUserRsp& from);
  void MergeFrom(const CreateUserRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.CreateUserRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginCheckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LoginCheckReq) */ {
 public:
  LoginCheckReq();
  virtual ~LoginCheckReq();

  LoginCheckReq(const LoginCheckReq& from);

  inline LoginCheckReq& operator=(const LoginCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginCheckReq(LoginCheckReq&& from) noexcept
    : LoginCheckReq() {
    *this = ::std::move(from);
  }

  inline LoginCheckReq& operator=(LoginCheckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginCheckReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginCheckReq* internal_default_instance() {
    return reinterpret_cast<const LoginCheckReq*>(
               &_LoginCheckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(LoginCheckReq* other);
  friend void swap(LoginCheckReq& a, LoginCheckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginCheckReq* New() const final {
    return CreateMaybeMessage<LoginCheckReq>(NULL);
  }

  LoginCheckReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginCheckReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginCheckReq& from);
  void MergeFrom(const LoginCheckReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginCheckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 2;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // @@protoc_insertion_point(class_scope:ssp.LoginCheckReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::ssp::MsgHeader* header_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginCheckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.LoginCheckRsp) */ {
 public:
  LoginCheckRsp();
  virtual ~LoginCheckRsp();

  LoginCheckRsp(const LoginCheckRsp& from);

  inline LoginCheckRsp& operator=(const LoginCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginCheckRsp(LoginCheckRsp&& from) noexcept
    : LoginCheckRsp() {
    *this = ::std::move(from);
  }

  inline LoginCheckRsp& operator=(LoginCheckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginCheckRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginCheckRsp* internal_default_instance() {
    return reinterpret_cast<const LoginCheckRsp*>(
               &_LoginCheckRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(LoginCheckRsp* other);
  friend void swap(LoginCheckRsp& a, LoginCheckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginCheckRsp* New() const final {
    return CreateMaybeMessage<LoginCheckRsp>(NULL);
  }

  LoginCheckRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginCheckRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginCheckRsp& from);
  void MergeFrom(const LoginCheckRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginCheckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.LoginCheckRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUserExistReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CheckUserExistReq) */ {
 public:
  CheckUserExistReq();
  virtual ~CheckUserExistReq();

  CheckUserExistReq(const CheckUserExistReq& from);

  inline CheckUserExistReq& operator=(const CheckUserExistReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserExistReq(CheckUserExistReq&& from) noexcept
    : CheckUserExistReq() {
    *this = ::std::move(from);
  }

  inline CheckUserExistReq& operator=(CheckUserExistReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserExistReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserExistReq* internal_default_instance() {
    return reinterpret_cast<const CheckUserExistReq*>(
               &_CheckUserExistReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CheckUserExistReq* other);
  friend void swap(CheckUserExistReq& a, CheckUserExistReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserExistReq* New() const final {
    return CreateMaybeMessage<CheckUserExistReq>(NULL);
  }

  CheckUserExistReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserExistReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserExistReq& from);
  void MergeFrom(const CheckUserExistReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserExistReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.CheckUserExistReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 user_id_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUserExistRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.CheckUserExistRsp) */ {
 public:
  CheckUserExistRsp();
  virtual ~CheckUserExistRsp();

  CheckUserExistRsp(const CheckUserExistRsp& from);

  inline CheckUserExistRsp& operator=(const CheckUserExistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserExistRsp(CheckUserExistRsp&& from) noexcept
    : CheckUserExistRsp() {
    *this = ::std::move(from);
  }

  inline CheckUserExistRsp& operator=(CheckUserExistRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserExistRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserExistRsp* internal_default_instance() {
    return reinterpret_cast<const CheckUserExistRsp*>(
               &_CheckUserExistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CheckUserExistRsp* other);
  friend void swap(CheckUserExistRsp& a, CheckUserExistRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserExistRsp* New() const final {
    return CreateMaybeMessage<CheckUserExistRsp>(NULL);
  }

  CheckUserExistRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserExistRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserExistRsp& from);
  void MergeFrom(const CheckUserExistRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserExistRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.CheckUserExistRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::google::protobuf::int32 ret_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerToUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.ServerToUserReq) */ {
 public:
  ServerToUserReq();
  virtual ~ServerToUserReq();

  ServerToUserReq(const ServerToUserReq& from);

  inline ServerToUserReq& operator=(const ServerToUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerToUserReq(ServerToUserReq&& from) noexcept
    : ServerToUserReq() {
    *this = ::std::move(from);
  }

  inline ServerToUserReq& operator=(ServerToUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerToUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerToUserReq* internal_default_instance() {
    return reinterpret_cast<const ServerToUserReq*>(
               &_ServerToUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ServerToUserReq* other);
  friend void swap(ServerToUserReq& a, ServerToUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerToUserReq* New() const final {
    return CreateMaybeMessage<ServerToUserReq>(NULL);
  }

  ServerToUserReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerToUserReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerToUserReq& from);
  void MergeFrom(const ServerToUserReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  bool has_get_user_id() const;
  void clear_get_user_id();
  static const int kGetUserIdFieldNumber = 2;
  private:
  const ::ssp::GetUserIdByNameReq& _internal_get_user_id() const;
  public:
  const ::ssp::GetUserIdByNameReq& get_user_id() const;
  ::ssp::GetUserIdByNameReq* release_get_user_id();
  ::ssp::GetUserIdByNameReq* mutable_get_user_id();
  void set_allocated_get_user_id(::ssp::GetUserIdByNameReq* get_user_id);

  // optional .ssp.CreateUserReq create_user = 3;
  bool has_create_user() const;
  void clear_create_user();
  static const int kCreateUserFieldNumber = 3;
  private:
  const ::ssp::CreateUserReq& _internal_create_user() const;
  public:
  const ::ssp::CreateUserReq& create_user() const;
  ::ssp::CreateUserReq* release_create_user();
  ::ssp::CreateUserReq* mutable_create_user();
  void set_allocated_create_user(::ssp::CreateUserReq* create_user);

  // optional .ssp.LoginCheckReq login_check = 4;
  bool has_login_check() const;
  void clear_login_check();
  static const int kLoginCheckFieldNumber = 4;
  private:
  const ::ssp::LoginCheckReq& _internal_login_check() const;
  public:
  const ::ssp::LoginCheckReq& login_check() const;
  ::ssp::LoginCheckReq* release_login_check();
  ::ssp::LoginCheckReq* mutable_login_check();
  void set_allocated_login_check(::ssp::LoginCheckReq* login_check);

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  bool has_check_user_exist() const;
  void clear_check_user_exist();
  static const int kCheckUserExistFieldNumber = 5;
  private:
  const ::ssp::CheckUserExistReq& _internal_check_user_exist() const;
  public:
  const ::ssp::CheckUserExistReq& check_user_exist() const;
  ::ssp::CheckUserExistReq* release_check_user_exist();
  ::ssp::CheckUserExistReq* mutable_check_user_exist();
  void set_allocated_check_user_exist(::ssp::CheckUserExistReq* check_user_exist);

  // @@protoc_insertion_point(class_scope:ssp.ServerToUserReq)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_get_user_id();
  void clear_has_get_user_id();
  void set_has_create_user();
  void clear_has_create_user();
  void set_has_login_check();
  void clear_has_login_check();
  void set_has_check_user_exist();
  void clear_has_check_user_exist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::ssp::GetUserIdByNameReq* get_user_id_;
  ::ssp::CreateUserReq* create_user_;
  ::ssp::LoginCheckReq* login_check_;
  ::ssp::CheckUserExistReq* check_user_exist_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserToServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.UserToServerRsp) */ {
 public:
  UserToServerRsp();
  virtual ~UserToServerRsp();

  UserToServerRsp(const UserToServerRsp& from);

  inline UserToServerRsp& operator=(const UserToServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserToServerRsp(UserToServerRsp&& from) noexcept
    : UserToServerRsp() {
    *this = ::std::move(from);
  }

  inline UserToServerRsp& operator=(UserToServerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserToServerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToServerRsp* internal_default_instance() {
    return reinterpret_cast<const UserToServerRsp*>(
               &_UserToServerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(UserToServerRsp* other);
  friend void swap(UserToServerRsp& a, UserToServerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserToServerRsp* New() const final {
    return CreateMaybeMessage<UserToServerRsp>(NULL);
  }

  UserToServerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserToServerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserToServerRsp& from);
  void MergeFrom(const UserToServerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ssp::MsgHeader& _internal_header() const;
  public:
  const ::ssp::MsgHeader& header() const;
  ::ssp::MsgHeader* release_header();
  ::ssp::MsgHeader* mutable_header();
  void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  bool has_get_user_id() const;
  void clear_get_user_id();
  static const int kGetUserIdFieldNumber = 2;
  private:
  const ::ssp::GetUserIdByNameRsp& _internal_get_user_id() const;
  public:
  const ::ssp::GetUserIdByNameRsp& get_user_id() const;
  ::ssp::GetUserIdByNameRsp* release_get_user_id();
  ::ssp::GetUserIdByNameRsp* mutable_get_user_id();
  void set_allocated_get_user_id(::ssp::GetUserIdByNameRsp* get_user_id);

  // optional .ssp.CreateUserRsp create_user = 3;
  bool has_create_user() const;
  void clear_create_user();
  static const int kCreateUserFieldNumber = 3;
  private:
  const ::ssp::CreateUserRsp& _internal_create_user() const;
  public:
  const ::ssp::CreateUserRsp& create_user() const;
  ::ssp::CreateUserRsp* release_create_user();
  ::ssp::CreateUserRsp* mutable_create_user();
  void set_allocated_create_user(::ssp::CreateUserRsp* create_user);

  // optional .ssp.LoginCheckRsp login_check = 4;
  bool has_login_check() const;
  void clear_login_check();
  static const int kLoginCheckFieldNumber = 4;
  private:
  const ::ssp::LoginCheckRsp& _internal_login_check() const;
  public:
  const ::ssp::LoginCheckRsp& login_check() const;
  ::ssp::LoginCheckRsp* release_login_check();
  ::ssp::LoginCheckRsp* mutable_login_check();
  void set_allocated_login_check(::ssp::LoginCheckRsp* login_check);

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  bool has_check_user_exist() const;
  void clear_check_user_exist();
  static const int kCheckUserExistFieldNumber = 5;
  private:
  const ::ssp::CheckUserExistRsp& _internal_check_user_exist() const;
  public:
  const ::ssp::CheckUserExistRsp& check_user_exist() const;
  ::ssp::CheckUserExistRsp* release_check_user_exist();
  ::ssp::CheckUserExistRsp* mutable_check_user_exist();
  void set_allocated_check_user_exist(::ssp::CheckUserExistRsp* check_user_exist);

  // @@protoc_insertion_point(class_scope:ssp.UserToServerRsp)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_get_user_id();
  void clear_has_get_user_id();
  void set_has_create_user();
  void clear_has_create_user();
  void set_has_login_check();
  void clear_has_login_check();
  void set_has_check_user_exist();
  void clear_has_check_user_exist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssp::MsgHeader* header_;
  ::ssp::GetUserIdByNameRsp* get_user_id_;
  ::ssp::CreateUserRsp* create_user_;
  ::ssp::LoginCheckRsp* login_check_;
  ::ssp::CheckUserExistRsp* check_user_exist_;
  friend struct ::protobuf_message_5fdefine_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader

// optional uint32 ver = 1;
inline bool MsgHeader::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHeader::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHeader::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHeader::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 MsgHeader::ver() const {
  // @@protoc_insertion_point(field_get:ssp.MsgHeader.ver)
  return ver_;
}
inline void MsgHeader::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:ssp.MsgHeader.ver)
}

// optional uint32 cmd_type = 2;
inline bool MsgHeader::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHeader::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHeader::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHeader::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 MsgHeader::cmd_type() const {
  // @@protoc_insertion_point(field_get:ssp.MsgHeader.cmd_type)
  return cmd_type_;
}
inline void MsgHeader::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:ssp.MsgHeader.cmd_type)
}

// -------------------------------------------------------------------

// RegReq

// optional .ssp.MsgHeader header = 1;
inline bool RegReq::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegReq::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& RegReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& RegReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.RegReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* RegReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.RegReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* RegReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.RegReq.header)
  return header_;
}
inline void RegReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.RegReq.header)
}

// optional string user_name = 3;
inline bool RegReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& RegReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.user_name)
  return user_name_.GetNoArena();
}
inline void RegReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.user_name)
}
#if LANG_CXX11
inline void RegReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.RegReq.user_name)
}
#endif
inline void RegReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.RegReq.user_name)
}
inline void RegReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.RegReq.user_name)
}
inline ::std::string* RegReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.RegReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.RegReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.RegReq.user_name)
}

// optional string password = 4;
inline bool RegReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& RegReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.password)
  return password_.GetNoArena();
}
inline void RegReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.password)
}
#if LANG_CXX11
inline void RegReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.RegReq.password)
}
#endif
inline void RegReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.RegReq.password)
}
inline void RegReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.RegReq.password)
}
inline ::std::string* RegReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ssp.RegReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.RegReq.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ssp.RegReq.password)
}

// optional uint32 from = 5;
inline bool RegReq::has_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegReq::set_has_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegReq::clear_has_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegReq::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 RegReq::from() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.from)
  return from_;
}
inline void RegReq::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:ssp.RegReq.from)
}

// -------------------------------------------------------------------

// RegRsp

// optional .ssp.MsgHeader header = 1;
inline bool RegRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& RegRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& RegRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.RegRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* RegRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.RegRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* RegRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.RegRsp.header)
  return header_;
}
inline void RegRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.RegRsp.header)
}

// optional uint32 ret = 3;
inline bool RegRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 RegRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.RegRsp.ret)
  return ret_;
}
inline void RegRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.RegRsp.ret)
}

// optional uint32 user_id = 4;
inline bool RegRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RegRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.RegRsp.user_id)
  return user_id_;
}
inline void RegRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.RegRsp.user_id)
}

// -------------------------------------------------------------------

// LoginReq

// optional .ssp.MsgHeader header = 1;
inline bool LoginReq::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LoginReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LoginReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LoginReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LoginReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LoginReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LoginReq.header)
  return header_;
}
inline void LoginReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginReq.header)
}

// optional string user_name = 3;
inline bool LoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.user_name)
  return user_name_.GetNoArena();
}
inline void LoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.LoginReq.user_name)
}
#if LANG_CXX11
inline void LoginReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.LoginReq.user_name)
}
#endif
inline void LoginReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.LoginReq.user_name)
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.LoginReq.user_name)
}
inline ::std::string* LoginReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.LoginReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.LoginReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginReq.user_name)
}

// optional string password = 4;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.password)
  return password_.GetNoArena();
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.LoginReq.password)
}
#if LANG_CXX11
inline void LoginReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.LoginReq.password)
}
#endif
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.LoginReq.password)
}
inline void LoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.LoginReq.password)
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ssp.LoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.LoginReq.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRsp

// optional .ssp.MsgHeader header = 1;
inline bool LoginRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LoginRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LoginRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LoginRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LoginRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LoginRsp.header)
  return header_;
}
inline void LoginRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginRsp.header)
}

// optional uint32 ret = 3;
inline bool LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 LoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.ret)
  return ret_;
}
inline void LoginRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.LoginRsp.ret)
}

// optional uint32 user_id = 4;
inline bool LoginRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 LoginRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.user_id)
  return user_id_;
}
inline void LoginRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.LoginRsp.user_id)
}

// -------------------------------------------------------------------

// LogoutReq

// optional .ssp.MsgHeader header = 1;
inline bool LogoutReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LogoutReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LogoutReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LogoutReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LogoutReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LogoutReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LogoutReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LogoutReq.header)
  return header_;
}
inline void LogoutReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LogoutReq.header)
}

// optional uint32 user_id = 2;
inline bool LogoutReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 LogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutReq.user_id)
  return user_id_;
}
inline void LogoutReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.LogoutReq.user_id)
}

// -------------------------------------------------------------------

// LogoutRsp

// optional .ssp.MsgHeader header = 1;
inline bool LogoutRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LogoutRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LogoutRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LogoutRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LogoutRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LogoutRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LogoutRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LogoutRsp.header)
  return header_;
}
inline void LogoutRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LogoutRsp.header)
}

// optional uint32 ret = 2;
inline bool LogoutRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 LogoutRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutRsp.ret)
  return ret_;
}
inline void LogoutRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.LogoutRsp.ret)
}

// optional uint32 user_id = 3;
inline bool LogoutRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogoutRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogoutRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogoutRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 LogoutRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutRsp.user_id)
  return user_id_;
}
inline void LogoutRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.LogoutRsp.user_id)
}

// -------------------------------------------------------------------

// AddFriendReq

// optional .ssp.MsgHeader header = 1;
inline bool AddFriendReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& AddFriendReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& AddFriendReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* AddFriendReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.AddFriendReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* AddFriendReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.AddFriendReq.header)
  return header_;
}
inline void AddFriendReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.AddFriendReq.header)
}

// optional uint32 user_id = 2;
inline bool AddFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 AddFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.user_id)
  return user_id_;
}
inline void AddFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.AddFriendReq.user_id)
}

// optional uint32 other_id = 3;
inline bool AddFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFriendReq::clear_other_id() {
  other_id_ = 0u;
  clear_has_other_id();
}
inline ::google::protobuf::uint32 AddFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.other_id)
  return other_id_;
}
inline void AddFriendReq::set_other_id(::google::protobuf::uint32 value) {
  set_has_other_id();
  other_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.AddFriendReq.other_id)
}

// -------------------------------------------------------------------

// AddFriendRsp

// optional .ssp.MsgHeader header = 1;
inline bool AddFriendRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& AddFriendRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& AddFriendRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.AddFriendRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* AddFriendRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.AddFriendRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* AddFriendRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.AddFriendRsp.header)
  return header_;
}
inline void AddFriendRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.AddFriendRsp.header)
}

// optional uint32 ret = 2;
inline bool AddFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 AddFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendRsp.ret)
  return ret_;
}
inline void AddFriendRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.AddFriendRsp.ret)
}

// -------------------------------------------------------------------

// DelFriendReq

// optional .ssp.MsgHeader header = 1;
inline bool DelFriendReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& DelFriendReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& DelFriendReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* DelFriendReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.DelFriendReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* DelFriendReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.DelFriendReq.header)
  return header_;
}
inline void DelFriendReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.DelFriendReq.header)
}

// optional uint32 user_id = 2;
inline bool DelFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DelFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.user_id)
  return user_id_;
}
inline void DelFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.DelFriendReq.user_id)
}

// optional uint32 other_id = 3;
inline bool DelFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelFriendReq::clear_other_id() {
  other_id_ = 0u;
  clear_has_other_id();
}
inline ::google::protobuf::uint32 DelFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.other_id)
  return other_id_;
}
inline void DelFriendReq::set_other_id(::google::protobuf::uint32 value) {
  set_has_other_id();
  other_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.DelFriendReq.other_id)
}

// -------------------------------------------------------------------

// DelFriendRsp

// optional .ssp.MsgHeader header = 1;
inline bool DelFriendRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& DelFriendRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& DelFriendRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.DelFriendRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* DelFriendRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.DelFriendRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* DelFriendRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.DelFriendRsp.header)
  return header_;
}
inline void DelFriendRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.DelFriendRsp.header)
}

// optional uint32 ret = 2;
inline bool DelFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 DelFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendRsp.ret)
  return ret_;
}
inline void DelFriendRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.DelFriendRsp.ret)
}

// -------------------------------------------------------------------

// PublishMessageReq

// optional .ssp.MsgHeader header = 1;
inline bool PublishMessageReq::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageReq::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& PublishMessageReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& PublishMessageReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* PublishMessageReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.PublishMessageReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* PublishMessageReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.PublishMessageReq.header)
  return header_;
}
inline void PublishMessageReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.PublishMessageReq.header)
}

// optional uint32 user_id = 2;
inline bool PublishMessageReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishMessageReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishMessageReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishMessageReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 PublishMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.user_id)
  return user_id_;
}
inline void PublishMessageReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.PublishMessageReq.user_id)
}

// optional string content = 3;
inline bool PublishMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageReq::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& PublishMessageReq::content() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.content)
  return content_.GetNoArena();
}
inline void PublishMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.PublishMessageReq.content)
}
#if LANG_CXX11
inline void PublishMessageReq::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.PublishMessageReq.content)
}
#endif
inline void PublishMessageReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.PublishMessageReq.content)
}
inline void PublishMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.PublishMessageReq.content)
}
inline ::std::string* PublishMessageReq::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ssp.PublishMessageReq.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishMessageReq::release_content() {
  // @@protoc_insertion_point(field_release:ssp.PublishMessageReq.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishMessageReq::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ssp.PublishMessageReq.content)
}

// -------------------------------------------------------------------

// PublishMessageRsp

// optional .ssp.MsgHeader header = 1;
inline bool PublishMessageRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& PublishMessageRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& PublishMessageRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.PublishMessageRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* PublishMessageRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.PublishMessageRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* PublishMessageRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.PublishMessageRsp.header)
  return header_;
}
inline void PublishMessageRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.PublishMessageRsp.header)
}

// optional uint32 ret = 2;
inline bool PublishMessageRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 PublishMessageRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageRsp.ret)
  return ret_;
}
inline void PublishMessageRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.PublishMessageRsp.ret)
}

// -------------------------------------------------------------------

// GetMessageListReq

// optional .ssp.MsgHeader header = 1;
inline bool GetMessageListReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageListReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageListReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageListReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetMessageListReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetMessageListReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetMessageListReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetMessageListReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetMessageListReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetMessageListReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetMessageListReq.header)
  return header_;
}
inline void GetMessageListReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetMessageListReq.header)
}

// optional uint32 user_id = 2;
inline bool GetMessageListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 GetMessageListReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageListReq.user_id)
  return user_id_;
}
inline void GetMessageListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetMessageListReq.user_id)
}

// -------------------------------------------------------------------

// MessageItem

// optional uint32 publisher_id = 1;
inline bool MessageItem::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageItem::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageItem::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageItem::clear_publisher_id() {
  publisher_id_ = 0u;
  clear_has_publisher_id();
}
inline ::google::protobuf::uint32 MessageItem::publisher_id() const {
  // @@protoc_insertion_point(field_get:ssp.MessageItem.publisher_id)
  return publisher_id_;
}
inline void MessageItem::set_publisher_id(::google::protobuf::uint32 value) {
  set_has_publisher_id();
  publisher_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.MessageItem.publisher_id)
}

// optional uint32 publish_time = 2;
inline bool MessageItem::has_publish_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageItem::set_has_publish_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageItem::clear_has_publish_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageItem::clear_publish_time() {
  publish_time_ = 0u;
  clear_has_publish_time();
}
inline ::google::protobuf::uint32 MessageItem::publish_time() const {
  // @@protoc_insertion_point(field_get:ssp.MessageItem.publish_time)
  return publish_time_;
}
inline void MessageItem::set_publish_time(::google::protobuf::uint32 value) {
  set_has_publish_time();
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:ssp.MessageItem.publish_time)
}

// optional string content = 3;
inline bool MessageItem::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageItem::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageItem::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageItem::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& MessageItem::content() const {
  // @@protoc_insertion_point(field_get:ssp.MessageItem.content)
  return content_.GetNoArena();
}
inline void MessageItem::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.MessageItem.content)
}
#if LANG_CXX11
inline void MessageItem::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.MessageItem.content)
}
#endif
inline void MessageItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.MessageItem.content)
}
inline void MessageItem::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.MessageItem.content)
}
inline ::std::string* MessageItem::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ssp.MessageItem.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageItem::release_content() {
  // @@protoc_insertion_point(field_release:ssp.MessageItem.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageItem::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ssp.MessageItem.content)
}

// -------------------------------------------------------------------

// GetMessageListRsp

// optional .ssp.MsgHeader header = 1;
inline bool GetMessageListRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageListRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageListRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageListRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetMessageListRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetMessageListRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetMessageListRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetMessageListRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetMessageListRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetMessageListRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetMessageListRsp.header)
  return header_;
}
inline void GetMessageListRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetMessageListRsp.header)
}

// optional uint32 ret = 2;
inline bool GetMessageListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageListRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GetMessageListRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageListRsp.ret)
  return ret_;
}
inline void GetMessageListRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetMessageListRsp.ret)
}

// repeated .ssp.MessageItem message_list = 3;
inline int GetMessageListRsp::message_list_size() const {
  return message_list_.size();
}
inline void GetMessageListRsp::clear_message_list() {
  message_list_.Clear();
}
inline ::ssp::MessageItem* GetMessageListRsp::mutable_message_list(int index) {
  // @@protoc_insertion_point(field_mutable:ssp.GetMessageListRsp.message_list)
  return message_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >*
GetMessageListRsp::mutable_message_list() {
  // @@protoc_insertion_point(field_mutable_list:ssp.GetMessageListRsp.message_list)
  return &message_list_;
}
inline const ::ssp::MessageItem& GetMessageListRsp::message_list(int index) const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageListRsp.message_list)
  return message_list_.Get(index);
}
inline ::ssp::MessageItem* GetMessageListRsp::add_message_list() {
  // @@protoc_insertion_point(field_add:ssp.GetMessageListRsp.message_list)
  return message_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >&
GetMessageListRsp::message_list() const {
  // @@protoc_insertion_point(field_list:ssp.GetMessageListRsp.message_list)
  return message_list_;
}

// -------------------------------------------------------------------

// GetPhotoReq

// optional .ssp.MsgHeader header = 1;
inline bool GetPhotoReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetPhotoReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetPhotoReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetPhotoReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetPhotoReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetPhotoReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetPhotoReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetPhotoReq.header)
  return header_;
}
inline void GetPhotoReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetPhotoReq.header)
}

// optional uint32 user_id = 2;
inline bool GetPhotoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 GetPhotoReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoReq.user_id)
  return user_id_;
}
inline void GetPhotoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetPhotoReq.user_id)
}

// -------------------------------------------------------------------

// GetPhotoRsp

// optional .ssp.MsgHeader header = 1;
inline bool GetPhotoRsp::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoRsp::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetPhotoRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetPhotoRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetPhotoRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetPhotoRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetPhotoRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetPhotoRsp.header)
  return header_;
}
inline void GetPhotoRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetPhotoRsp.header)
}

// optional uint32 ret = 2;
inline bool GetPhotoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPhotoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPhotoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPhotoRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GetPhotoRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.ret)
  return ret_;
}
inline void GetPhotoRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetPhotoRsp.ret)
}

// optional uint32 last_publisher_id = 3;
inline bool GetPhotoRsp::has_last_publisher_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPhotoRsp::set_has_last_publisher_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPhotoRsp::clear_has_last_publisher_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPhotoRsp::clear_last_publisher_id() {
  last_publisher_id_ = 0u;
  clear_has_last_publisher_id();
}
inline ::google::protobuf::uint32 GetPhotoRsp::last_publisher_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.last_publisher_id)
  return last_publisher_id_;
}
inline void GetPhotoRsp::set_last_publisher_id(::google::protobuf::uint32 value) {
  set_has_last_publisher_id();
  last_publisher_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetPhotoRsp.last_publisher_id)
}

// optional string last_publisher_name = 4;
inline bool GetPhotoRsp::has_last_publisher_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoRsp::set_has_last_publisher_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoRsp::clear_has_last_publisher_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoRsp::clear_last_publisher_name() {
  last_publisher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_publisher_name();
}
inline const ::std::string& GetPhotoRsp::last_publisher_name() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.last_publisher_name)
  return last_publisher_name_.GetNoArena();
}
inline void GetPhotoRsp::set_last_publisher_name(const ::std::string& value) {
  set_has_last_publisher_name();
  last_publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.GetPhotoRsp.last_publisher_name)
}
#if LANG_CXX11
inline void GetPhotoRsp::set_last_publisher_name(::std::string&& value) {
  set_has_last_publisher_name();
  last_publisher_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.GetPhotoRsp.last_publisher_name)
}
#endif
inline void GetPhotoRsp::set_last_publisher_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_publisher_name();
  last_publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.GetPhotoRsp.last_publisher_name)
}
inline void GetPhotoRsp::set_last_publisher_name(const char* value, size_t size) {
  set_has_last_publisher_name();
  last_publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.GetPhotoRsp.last_publisher_name)
}
inline ::std::string* GetPhotoRsp::mutable_last_publisher_name() {
  set_has_last_publisher_name();
  // @@protoc_insertion_point(field_mutable:ssp.GetPhotoRsp.last_publisher_name)
  return last_publisher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPhotoRsp::release_last_publisher_name() {
  // @@protoc_insertion_point(field_release:ssp.GetPhotoRsp.last_publisher_name)
  if (!has_last_publisher_name()) {
    return NULL;
  }
  clear_has_last_publisher_name();
  return last_publisher_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPhotoRsp::set_allocated_last_publisher_name(::std::string* last_publisher_name) {
  if (last_publisher_name != NULL) {
    set_has_last_publisher_name();
  } else {
    clear_has_last_publisher_name();
  }
  last_publisher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_publisher_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.GetPhotoRsp.last_publisher_name)
}

// -------------------------------------------------------------------

// CommonReq

// optional .ssp.MsgHeader header = 1;
inline bool CommonReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CommonReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CommonReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CommonReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CommonReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.header)
  return header_;
}
inline void CommonReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.header)
}

// optional .ssp.RegReq reg_req = 2;
inline bool CommonReq::has_reg_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonReq::set_has_reg_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonReq::clear_has_reg_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonReq::clear_reg_req() {
  if (reg_req_ != NULL) reg_req_->Clear();
  clear_has_reg_req();
}
inline const ::ssp::RegReq& CommonReq::_internal_reg_req() const {
  return *reg_req_;
}
inline const ::ssp::RegReq& CommonReq::reg_req() const {
  const ::ssp::RegReq* p = reg_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.reg_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::RegReq*>(
      &::ssp::_RegReq_default_instance_);
}
inline ::ssp::RegReq* CommonReq::release_reg_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.reg_req)
  clear_has_reg_req();
  ::ssp::RegReq* temp = reg_req_;
  reg_req_ = NULL;
  return temp;
}
inline ::ssp::RegReq* CommonReq::mutable_reg_req() {
  set_has_reg_req();
  if (reg_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::RegReq>(GetArenaNoVirtual());
    reg_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.reg_req)
  return reg_req_;
}
inline void CommonReq::set_allocated_reg_req(::ssp::RegReq* reg_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reg_req_;
  }
  if (reg_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reg_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reg_req, submessage_arena);
    }
    set_has_reg_req();
  } else {
    clear_has_reg_req();
  }
  reg_req_ = reg_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.reg_req)
}

// optional .ssp.LoginReq login_req = 3;
inline bool CommonReq::has_login_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonReq::set_has_login_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonReq::clear_has_login_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonReq::clear_login_req() {
  if (login_req_ != NULL) login_req_->Clear();
  clear_has_login_req();
}
inline const ::ssp::LoginReq& CommonReq::_internal_login_req() const {
  return *login_req_;
}
inline const ::ssp::LoginReq& CommonReq::login_req() const {
  const ::ssp::LoginReq* p = login_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.login_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LoginReq*>(
      &::ssp::_LoginReq_default_instance_);
}
inline ::ssp::LoginReq* CommonReq::release_login_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.login_req)
  clear_has_login_req();
  ::ssp::LoginReq* temp = login_req_;
  login_req_ = NULL;
  return temp;
}
inline ::ssp::LoginReq* CommonReq::mutable_login_req() {
  set_has_login_req();
  if (login_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LoginReq>(GetArenaNoVirtual());
    login_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.login_req)
  return login_req_;
}
inline void CommonReq::set_allocated_login_req(::ssp::LoginReq* login_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_req_;
  }
  if (login_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_req, submessage_arena);
    }
    set_has_login_req();
  } else {
    clear_has_login_req();
  }
  login_req_ = login_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.login_req)
}

// optional .ssp.LogoutReq logout_req = 4;
inline bool CommonReq::has_logout_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonReq::set_has_logout_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonReq::clear_has_logout_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonReq::clear_logout_req() {
  if (logout_req_ != NULL) logout_req_->Clear();
  clear_has_logout_req();
}
inline const ::ssp::LogoutReq& CommonReq::_internal_logout_req() const {
  return *logout_req_;
}
inline const ::ssp::LogoutReq& CommonReq::logout_req() const {
  const ::ssp::LogoutReq* p = logout_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.logout_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LogoutReq*>(
      &::ssp::_LogoutReq_default_instance_);
}
inline ::ssp::LogoutReq* CommonReq::release_logout_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.logout_req)
  clear_has_logout_req();
  ::ssp::LogoutReq* temp = logout_req_;
  logout_req_ = NULL;
  return temp;
}
inline ::ssp::LogoutReq* CommonReq::mutable_logout_req() {
  set_has_logout_req();
  if (logout_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LogoutReq>(GetArenaNoVirtual());
    logout_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.logout_req)
  return logout_req_;
}
inline void CommonReq::set_allocated_logout_req(::ssp::LogoutReq* logout_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logout_req_;
  }
  if (logout_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logout_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logout_req, submessage_arena);
    }
    set_has_logout_req();
  } else {
    clear_has_logout_req();
  }
  logout_req_ = logout_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.logout_req)
}

// optional .ssp.AddFriendReq add_friend_req = 5;
inline bool CommonReq::has_add_friend_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonReq::set_has_add_friend_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonReq::clear_has_add_friend_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonReq::clear_add_friend_req() {
  if (add_friend_req_ != NULL) add_friend_req_->Clear();
  clear_has_add_friend_req();
}
inline const ::ssp::AddFriendReq& CommonReq::_internal_add_friend_req() const {
  return *add_friend_req_;
}
inline const ::ssp::AddFriendReq& CommonReq::add_friend_req() const {
  const ::ssp::AddFriendReq* p = add_friend_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.add_friend_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::AddFriendReq*>(
      &::ssp::_AddFriendReq_default_instance_);
}
inline ::ssp::AddFriendReq* CommonReq::release_add_friend_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.add_friend_req)
  clear_has_add_friend_req();
  ::ssp::AddFriendReq* temp = add_friend_req_;
  add_friend_req_ = NULL;
  return temp;
}
inline ::ssp::AddFriendReq* CommonReq::mutable_add_friend_req() {
  set_has_add_friend_req();
  if (add_friend_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::AddFriendReq>(GetArenaNoVirtual());
    add_friend_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.add_friend_req)
  return add_friend_req_;
}
inline void CommonReq::set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete add_friend_req_;
  }
  if (add_friend_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_friend_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_friend_req, submessage_arena);
    }
    set_has_add_friend_req();
  } else {
    clear_has_add_friend_req();
  }
  add_friend_req_ = add_friend_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.add_friend_req)
}

// optional .ssp.DelFriendReq del_friend_req = 6;
inline bool CommonReq::has_del_friend_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonReq::set_has_del_friend_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonReq::clear_has_del_friend_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonReq::clear_del_friend_req() {
  if (del_friend_req_ != NULL) del_friend_req_->Clear();
  clear_has_del_friend_req();
}
inline const ::ssp::DelFriendReq& CommonReq::_internal_del_friend_req() const {
  return *del_friend_req_;
}
inline const ::ssp::DelFriendReq& CommonReq::del_friend_req() const {
  const ::ssp::DelFriendReq* p = del_friend_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.del_friend_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::DelFriendReq*>(
      &::ssp::_DelFriendReq_default_instance_);
}
inline ::ssp::DelFriendReq* CommonReq::release_del_friend_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.del_friend_req)
  clear_has_del_friend_req();
  ::ssp::DelFriendReq* temp = del_friend_req_;
  del_friend_req_ = NULL;
  return temp;
}
inline ::ssp::DelFriendReq* CommonReq::mutable_del_friend_req() {
  set_has_del_friend_req();
  if (del_friend_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::DelFriendReq>(GetArenaNoVirtual());
    del_friend_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.del_friend_req)
  return del_friend_req_;
}
inline void CommonReq::set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete del_friend_req_;
  }
  if (del_friend_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      del_friend_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, del_friend_req, submessage_arena);
    }
    set_has_del_friend_req();
  } else {
    clear_has_del_friend_req();
  }
  del_friend_req_ = del_friend_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.del_friend_req)
}

// optional .ssp.PublishMessageReq publish_message_req = 7;
inline bool CommonReq::has_publish_message_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonReq::set_has_publish_message_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonReq::clear_has_publish_message_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonReq::clear_publish_message_req() {
  if (publish_message_req_ != NULL) publish_message_req_->Clear();
  clear_has_publish_message_req();
}
inline const ::ssp::PublishMessageReq& CommonReq::_internal_publish_message_req() const {
  return *publish_message_req_;
}
inline const ::ssp::PublishMessageReq& CommonReq::publish_message_req() const {
  const ::ssp::PublishMessageReq* p = publish_message_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.publish_message_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::PublishMessageReq*>(
      &::ssp::_PublishMessageReq_default_instance_);
}
inline ::ssp::PublishMessageReq* CommonReq::release_publish_message_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.publish_message_req)
  clear_has_publish_message_req();
  ::ssp::PublishMessageReq* temp = publish_message_req_;
  publish_message_req_ = NULL;
  return temp;
}
inline ::ssp::PublishMessageReq* CommonReq::mutable_publish_message_req() {
  set_has_publish_message_req();
  if (publish_message_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::PublishMessageReq>(GetArenaNoVirtual());
    publish_message_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.publish_message_req)
  return publish_message_req_;
}
inline void CommonReq::set_allocated_publish_message_req(::ssp::PublishMessageReq* publish_message_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete publish_message_req_;
  }
  if (publish_message_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publish_message_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_message_req, submessage_arena);
    }
    set_has_publish_message_req();
  } else {
    clear_has_publish_message_req();
  }
  publish_message_req_ = publish_message_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.publish_message_req)
}

// optional .ssp.GetMessageListReq get_message_list_req = 8;
inline bool CommonReq::has_get_message_list_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonReq::set_has_get_message_list_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonReq::clear_has_get_message_list_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonReq::clear_get_message_list_req() {
  if (get_message_list_req_ != NULL) get_message_list_req_->Clear();
  clear_has_get_message_list_req();
}
inline const ::ssp::GetMessageListReq& CommonReq::_internal_get_message_list_req() const {
  return *get_message_list_req_;
}
inline const ::ssp::GetMessageListReq& CommonReq::get_message_list_req() const {
  const ::ssp::GetMessageListReq* p = get_message_list_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.get_message_list_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetMessageListReq*>(
      &::ssp::_GetMessageListReq_default_instance_);
}
inline ::ssp::GetMessageListReq* CommonReq::release_get_message_list_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.get_message_list_req)
  clear_has_get_message_list_req();
  ::ssp::GetMessageListReq* temp = get_message_list_req_;
  get_message_list_req_ = NULL;
  return temp;
}
inline ::ssp::GetMessageListReq* CommonReq::mutable_get_message_list_req() {
  set_has_get_message_list_req();
  if (get_message_list_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetMessageListReq>(GetArenaNoVirtual());
    get_message_list_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.get_message_list_req)
  return get_message_list_req_;
}
inline void CommonReq::set_allocated_get_message_list_req(::ssp::GetMessageListReq* get_message_list_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_message_list_req_;
  }
  if (get_message_list_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_message_list_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_message_list_req, submessage_arena);
    }
    set_has_get_message_list_req();
  } else {
    clear_has_get_message_list_req();
  }
  get_message_list_req_ = get_message_list_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.get_message_list_req)
}

// optional .ssp.GetPhotoReq get_photo_req = 9;
inline bool CommonReq::has_get_photo_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonReq::set_has_get_photo_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonReq::clear_has_get_photo_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonReq::clear_get_photo_req() {
  if (get_photo_req_ != NULL) get_photo_req_->Clear();
  clear_has_get_photo_req();
}
inline const ::ssp::GetPhotoReq& CommonReq::_internal_get_photo_req() const {
  return *get_photo_req_;
}
inline const ::ssp::GetPhotoReq& CommonReq::get_photo_req() const {
  const ::ssp::GetPhotoReq* p = get_photo_req_;
  // @@protoc_insertion_point(field_get:ssp.CommonReq.get_photo_req)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetPhotoReq*>(
      &::ssp::_GetPhotoReq_default_instance_);
}
inline ::ssp::GetPhotoReq* CommonReq::release_get_photo_req() {
  // @@protoc_insertion_point(field_release:ssp.CommonReq.get_photo_req)
  clear_has_get_photo_req();
  ::ssp::GetPhotoReq* temp = get_photo_req_;
  get_photo_req_ = NULL;
  return temp;
}
inline ::ssp::GetPhotoReq* CommonReq::mutable_get_photo_req() {
  set_has_get_photo_req();
  if (get_photo_req_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetPhotoReq>(GetArenaNoVirtual());
    get_photo_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonReq.get_photo_req)
  return get_photo_req_;
}
inline void CommonReq::set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_photo_req_;
  }
  if (get_photo_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_photo_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_photo_req, submessage_arena);
    }
    set_has_get_photo_req();
  } else {
    clear_has_get_photo_req();
  }
  get_photo_req_ = get_photo_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonReq.get_photo_req)
}

// -------------------------------------------------------------------

// CommonRsp

// optional .ssp.MsgHeader header = 1;
inline bool CommonRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CommonRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CommonRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CommonRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CommonRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.header)
  return header_;
}
inline void CommonRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.header)
}

// optional .ssp.RegRsp reg_rsp = 2;
inline bool CommonRsp::has_reg_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonRsp::set_has_reg_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonRsp::clear_has_reg_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonRsp::clear_reg_rsp() {
  if (reg_rsp_ != NULL) reg_rsp_->Clear();
  clear_has_reg_rsp();
}
inline const ::ssp::RegRsp& CommonRsp::_internal_reg_rsp() const {
  return *reg_rsp_;
}
inline const ::ssp::RegRsp& CommonRsp::reg_rsp() const {
  const ::ssp::RegRsp* p = reg_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.reg_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::RegRsp*>(
      &::ssp::_RegRsp_default_instance_);
}
inline ::ssp::RegRsp* CommonRsp::release_reg_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.reg_rsp)
  clear_has_reg_rsp();
  ::ssp::RegRsp* temp = reg_rsp_;
  reg_rsp_ = NULL;
  return temp;
}
inline ::ssp::RegRsp* CommonRsp::mutable_reg_rsp() {
  set_has_reg_rsp();
  if (reg_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::RegRsp>(GetArenaNoVirtual());
    reg_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.reg_rsp)
  return reg_rsp_;
}
inline void CommonRsp::set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reg_rsp_;
  }
  if (reg_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reg_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reg_rsp, submessage_arena);
    }
    set_has_reg_rsp();
  } else {
    clear_has_reg_rsp();
  }
  reg_rsp_ = reg_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.reg_rsp)
}

// optional .ssp.LoginRsp login_rsp = 3;
inline bool CommonRsp::has_login_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonRsp::set_has_login_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonRsp::clear_has_login_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonRsp::clear_login_rsp() {
  if (login_rsp_ != NULL) login_rsp_->Clear();
  clear_has_login_rsp();
}
inline const ::ssp::LoginRsp& CommonRsp::_internal_login_rsp() const {
  return *login_rsp_;
}
inline const ::ssp::LoginRsp& CommonRsp::login_rsp() const {
  const ::ssp::LoginRsp* p = login_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.login_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LoginRsp*>(
      &::ssp::_LoginRsp_default_instance_);
}
inline ::ssp::LoginRsp* CommonRsp::release_login_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.login_rsp)
  clear_has_login_rsp();
  ::ssp::LoginRsp* temp = login_rsp_;
  login_rsp_ = NULL;
  return temp;
}
inline ::ssp::LoginRsp* CommonRsp::mutable_login_rsp() {
  set_has_login_rsp();
  if (login_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LoginRsp>(GetArenaNoVirtual());
    login_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.login_rsp)
  return login_rsp_;
}
inline void CommonRsp::set_allocated_login_rsp(::ssp::LoginRsp* login_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_rsp_;
  }
  if (login_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_rsp, submessage_arena);
    }
    set_has_login_rsp();
  } else {
    clear_has_login_rsp();
  }
  login_rsp_ = login_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.login_rsp)
}

// optional .ssp.LogoutRsp logout_rsp = 4;
inline bool CommonRsp::has_logout_rsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonRsp::set_has_logout_rsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonRsp::clear_has_logout_rsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonRsp::clear_logout_rsp() {
  if (logout_rsp_ != NULL) logout_rsp_->Clear();
  clear_has_logout_rsp();
}
inline const ::ssp::LogoutRsp& CommonRsp::_internal_logout_rsp() const {
  return *logout_rsp_;
}
inline const ::ssp::LogoutRsp& CommonRsp::logout_rsp() const {
  const ::ssp::LogoutRsp* p = logout_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.logout_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LogoutRsp*>(
      &::ssp::_LogoutRsp_default_instance_);
}
inline ::ssp::LogoutRsp* CommonRsp::release_logout_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.logout_rsp)
  clear_has_logout_rsp();
  ::ssp::LogoutRsp* temp = logout_rsp_;
  logout_rsp_ = NULL;
  return temp;
}
inline ::ssp::LogoutRsp* CommonRsp::mutable_logout_rsp() {
  set_has_logout_rsp();
  if (logout_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LogoutRsp>(GetArenaNoVirtual());
    logout_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.logout_rsp)
  return logout_rsp_;
}
inline void CommonRsp::set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logout_rsp_;
  }
  if (logout_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logout_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logout_rsp, submessage_arena);
    }
    set_has_logout_rsp();
  } else {
    clear_has_logout_rsp();
  }
  logout_rsp_ = logout_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.logout_rsp)
}

// optional .ssp.AddFriendRsp add_friend_rsp = 5;
inline bool CommonRsp::has_add_friend_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonRsp::set_has_add_friend_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonRsp::clear_has_add_friend_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonRsp::clear_add_friend_rsp() {
  if (add_friend_rsp_ != NULL) add_friend_rsp_->Clear();
  clear_has_add_friend_rsp();
}
inline const ::ssp::AddFriendRsp& CommonRsp::_internal_add_friend_rsp() const {
  return *add_friend_rsp_;
}
inline const ::ssp::AddFriendRsp& CommonRsp::add_friend_rsp() const {
  const ::ssp::AddFriendRsp* p = add_friend_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.add_friend_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::AddFriendRsp*>(
      &::ssp::_AddFriendRsp_default_instance_);
}
inline ::ssp::AddFriendRsp* CommonRsp::release_add_friend_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.add_friend_rsp)
  clear_has_add_friend_rsp();
  ::ssp::AddFriendRsp* temp = add_friend_rsp_;
  add_friend_rsp_ = NULL;
  return temp;
}
inline ::ssp::AddFriendRsp* CommonRsp::mutable_add_friend_rsp() {
  set_has_add_friend_rsp();
  if (add_friend_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::AddFriendRsp>(GetArenaNoVirtual());
    add_friend_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.add_friend_rsp)
  return add_friend_rsp_;
}
inline void CommonRsp::set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete add_friend_rsp_;
  }
  if (add_friend_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_friend_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_friend_rsp, submessage_arena);
    }
    set_has_add_friend_rsp();
  } else {
    clear_has_add_friend_rsp();
  }
  add_friend_rsp_ = add_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.add_friend_rsp)
}

// optional .ssp.DelFriendRsp del_friend_rsp = 6;
inline bool CommonRsp::has_del_friend_rsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonRsp::set_has_del_friend_rsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonRsp::clear_has_del_friend_rsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonRsp::clear_del_friend_rsp() {
  if (del_friend_rsp_ != NULL) del_friend_rsp_->Clear();
  clear_has_del_friend_rsp();
}
inline const ::ssp::DelFriendRsp& CommonRsp::_internal_del_friend_rsp() const {
  return *del_friend_rsp_;
}
inline const ::ssp::DelFriendRsp& CommonRsp::del_friend_rsp() const {
  const ::ssp::DelFriendRsp* p = del_friend_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.del_friend_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::DelFriendRsp*>(
      &::ssp::_DelFriendRsp_default_instance_);
}
inline ::ssp::DelFriendRsp* CommonRsp::release_del_friend_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.del_friend_rsp)
  clear_has_del_friend_rsp();
  ::ssp::DelFriendRsp* temp = del_friend_rsp_;
  del_friend_rsp_ = NULL;
  return temp;
}
inline ::ssp::DelFriendRsp* CommonRsp::mutable_del_friend_rsp() {
  set_has_del_friend_rsp();
  if (del_friend_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::DelFriendRsp>(GetArenaNoVirtual());
    del_friend_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.del_friend_rsp)
  return del_friend_rsp_;
}
inline void CommonRsp::set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete del_friend_rsp_;
  }
  if (del_friend_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      del_friend_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, del_friend_rsp, submessage_arena);
    }
    set_has_del_friend_rsp();
  } else {
    clear_has_del_friend_rsp();
  }
  del_friend_rsp_ = del_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.del_friend_rsp)
}

// optional .ssp.PublishMessageRsp publish_message_rsp = 7;
inline bool CommonRsp::has_publish_message_rsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonRsp::set_has_publish_message_rsp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonRsp::clear_has_publish_message_rsp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonRsp::clear_publish_message_rsp() {
  if (publish_message_rsp_ != NULL) publish_message_rsp_->Clear();
  clear_has_publish_message_rsp();
}
inline const ::ssp::PublishMessageRsp& CommonRsp::_internal_publish_message_rsp() const {
  return *publish_message_rsp_;
}
inline const ::ssp::PublishMessageRsp& CommonRsp::publish_message_rsp() const {
  const ::ssp::PublishMessageRsp* p = publish_message_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.publish_message_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::PublishMessageRsp*>(
      &::ssp::_PublishMessageRsp_default_instance_);
}
inline ::ssp::PublishMessageRsp* CommonRsp::release_publish_message_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.publish_message_rsp)
  clear_has_publish_message_rsp();
  ::ssp::PublishMessageRsp* temp = publish_message_rsp_;
  publish_message_rsp_ = NULL;
  return temp;
}
inline ::ssp::PublishMessageRsp* CommonRsp::mutable_publish_message_rsp() {
  set_has_publish_message_rsp();
  if (publish_message_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::PublishMessageRsp>(GetArenaNoVirtual());
    publish_message_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.publish_message_rsp)
  return publish_message_rsp_;
}
inline void CommonRsp::set_allocated_publish_message_rsp(::ssp::PublishMessageRsp* publish_message_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete publish_message_rsp_;
  }
  if (publish_message_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publish_message_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_message_rsp, submessage_arena);
    }
    set_has_publish_message_rsp();
  } else {
    clear_has_publish_message_rsp();
  }
  publish_message_rsp_ = publish_message_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.publish_message_rsp)
}

// optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
inline bool CommonRsp::has_get_message_list_rsp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonRsp::set_has_get_message_list_rsp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonRsp::clear_has_get_message_list_rsp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonRsp::clear_get_message_list_rsp() {
  if (get_message_list_rsp_ != NULL) get_message_list_rsp_->Clear();
  clear_has_get_message_list_rsp();
}
inline const ::ssp::GetMessageListRsp& CommonRsp::_internal_get_message_list_rsp() const {
  return *get_message_list_rsp_;
}
inline const ::ssp::GetMessageListRsp& CommonRsp::get_message_list_rsp() const {
  const ::ssp::GetMessageListRsp* p = get_message_list_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.get_message_list_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetMessageListRsp*>(
      &::ssp::_GetMessageListRsp_default_instance_);
}
inline ::ssp::GetMessageListRsp* CommonRsp::release_get_message_list_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.get_message_list_rsp)
  clear_has_get_message_list_rsp();
  ::ssp::GetMessageListRsp* temp = get_message_list_rsp_;
  get_message_list_rsp_ = NULL;
  return temp;
}
inline ::ssp::GetMessageListRsp* CommonRsp::mutable_get_message_list_rsp() {
  set_has_get_message_list_rsp();
  if (get_message_list_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetMessageListRsp>(GetArenaNoVirtual());
    get_message_list_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.get_message_list_rsp)
  return get_message_list_rsp_;
}
inline void CommonRsp::set_allocated_get_message_list_rsp(::ssp::GetMessageListRsp* get_message_list_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_message_list_rsp_;
  }
  if (get_message_list_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_message_list_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_message_list_rsp, submessage_arena);
    }
    set_has_get_message_list_rsp();
  } else {
    clear_has_get_message_list_rsp();
  }
  get_message_list_rsp_ = get_message_list_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.get_message_list_rsp)
}

// optional .ssp.GetPhotoRsp get_photo_rsp = 9;
inline bool CommonRsp::has_get_photo_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonRsp::set_has_get_photo_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonRsp::clear_has_get_photo_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonRsp::clear_get_photo_rsp() {
  if (get_photo_rsp_ != NULL) get_photo_rsp_->Clear();
  clear_has_get_photo_rsp();
}
inline const ::ssp::GetPhotoRsp& CommonRsp::_internal_get_photo_rsp() const {
  return *get_photo_rsp_;
}
inline const ::ssp::GetPhotoRsp& CommonRsp::get_photo_rsp() const {
  const ::ssp::GetPhotoRsp* p = get_photo_rsp_;
  // @@protoc_insertion_point(field_get:ssp.CommonRsp.get_photo_rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetPhotoRsp*>(
      &::ssp::_GetPhotoRsp_default_instance_);
}
inline ::ssp::GetPhotoRsp* CommonRsp::release_get_photo_rsp() {
  // @@protoc_insertion_point(field_release:ssp.CommonRsp.get_photo_rsp)
  clear_has_get_photo_rsp();
  ::ssp::GetPhotoRsp* temp = get_photo_rsp_;
  get_photo_rsp_ = NULL;
  return temp;
}
inline ::ssp::GetPhotoRsp* CommonRsp::mutable_get_photo_rsp() {
  set_has_get_photo_rsp();
  if (get_photo_rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetPhotoRsp>(GetArenaNoVirtual());
    get_photo_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CommonRsp.get_photo_rsp)
  return get_photo_rsp_;
}
inline void CommonRsp::set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_photo_rsp_;
  }
  if (get_photo_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_photo_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_photo_rsp, submessage_arena);
    }
    set_has_get_photo_rsp();
  } else {
    clear_has_get_photo_rsp();
  }
  get_photo_rsp_ = get_photo_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.CommonRsp.get_photo_rsp)
}

// -------------------------------------------------------------------

// GetUserIdByNameReq

// optional .ssp.MsgHeader header = 1;
inline bool GetUserIdByNameReq::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUserIdByNameReq::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUserIdByNameReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUserIdByNameReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetUserIdByNameReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetUserIdByNameReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetUserIdByNameReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetUserIdByNameReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetUserIdByNameReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetUserIdByNameReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetUserIdByNameReq.header)
  return header_;
}
inline void GetUserIdByNameReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetUserIdByNameReq.header)
}

// optional string user_name = 2;
inline bool GetUserIdByNameReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUserIdByNameReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUserIdByNameReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUserIdByNameReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& GetUserIdByNameReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.GetUserIdByNameReq.user_name)
  return user_name_.GetNoArena();
}
inline void GetUserIdByNameReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.GetUserIdByNameReq.user_name)
}
#if LANG_CXX11
inline void GetUserIdByNameReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.GetUserIdByNameReq.user_name)
}
#endif
inline void GetUserIdByNameReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.GetUserIdByNameReq.user_name)
}
inline void GetUserIdByNameReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.GetUserIdByNameReq.user_name)
}
inline ::std::string* GetUserIdByNameReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.GetUserIdByNameReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserIdByNameReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.GetUserIdByNameReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserIdByNameReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.GetUserIdByNameReq.user_name)
}

// -------------------------------------------------------------------

// GetUserIdByNameRsp

// optional .ssp.MsgHeader header = 1;
inline bool GetUserIdByNameRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUserIdByNameRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUserIdByNameRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUserIdByNameRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetUserIdByNameRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& GetUserIdByNameRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.GetUserIdByNameRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* GetUserIdByNameRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.GetUserIdByNameRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* GetUserIdByNameRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.GetUserIdByNameRsp.header)
  return header_;
}
inline void GetUserIdByNameRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetUserIdByNameRsp.header)
}

// optional int32 ret = 2;
inline bool GetUserIdByNameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUserIdByNameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUserIdByNameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUserIdByNameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GetUserIdByNameRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.GetUserIdByNameRsp.ret)
  return ret_;
}
inline void GetUserIdByNameRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetUserIdByNameRsp.ret)
}

// optional int32 user_id = 3;
inline bool GetUserIdByNameRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetUserIdByNameRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetUserIdByNameRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetUserIdByNameRsp::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 GetUserIdByNameRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetUserIdByNameRsp.user_id)
  return user_id_;
}
inline void GetUserIdByNameRsp::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.GetUserIdByNameRsp.user_id)
}

// -------------------------------------------------------------------

// CreateUserReq

// optional .ssp.MsgHeader header = 1;
inline bool CreateUserReq::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateUserReq::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateUserReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateUserReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CreateUserReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CreateUserReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CreateUserReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CreateUserReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CreateUserReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CreateUserReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CreateUserReq.header)
  return header_;
}
inline void CreateUserReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CreateUserReq.header)
}

// optional string user_name = 2;
inline bool CreateUserReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateUserReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateUserReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateUserReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& CreateUserReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.CreateUserReq.user_name)
  return user_name_.GetNoArena();
}
inline void CreateUserReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.CreateUserReq.user_name)
}
#if LANG_CXX11
inline void CreateUserReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.CreateUserReq.user_name)
}
#endif
inline void CreateUserReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.CreateUserReq.user_name)
}
inline void CreateUserReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.CreateUserReq.user_name)
}
inline ::std::string* CreateUserReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.CreateUserReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.CreateUserReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.CreateUserReq.user_name)
}

// optional string password = 3;
inline bool CreateUserReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateUserReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateUserReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateUserReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CreateUserReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.CreateUserReq.password)
  return password_.GetNoArena();
}
inline void CreateUserReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.CreateUserReq.password)
}
#if LANG_CXX11
inline void CreateUserReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.CreateUserReq.password)
}
#endif
inline void CreateUserReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.CreateUserReq.password)
}
inline void CreateUserReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.CreateUserReq.password)
}
inline ::std::string* CreateUserReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ssp.CreateUserReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.CreateUserReq.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ssp.CreateUserReq.password)
}

// optional int32 from = 4;
inline bool CreateUserReq::has_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateUserReq::set_has_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateUserReq::clear_has_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateUserReq::clear_from() {
  from_ = 0;
  clear_has_from();
}
inline ::google::protobuf::int32 CreateUserReq::from() const {
  // @@protoc_insertion_point(field_get:ssp.CreateUserReq.from)
  return from_;
}
inline void CreateUserReq::set_from(::google::protobuf::int32 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:ssp.CreateUserReq.from)
}

// -------------------------------------------------------------------

// CreateUserRsp

// optional .ssp.MsgHeader header = 1;
inline bool CreateUserRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateUserRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateUserRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateUserRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CreateUserRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CreateUserRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CreateUserRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CreateUserRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CreateUserRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CreateUserRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CreateUserRsp.header)
  return header_;
}
inline void CreateUserRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CreateUserRsp.header)
}

// optional int32 ret = 2;
inline bool CreateUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 CreateUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.CreateUserRsp.ret)
  return ret_;
}
inline void CreateUserRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.CreateUserRsp.ret)
}

// optional int32 user_id = 3;
inline bool CreateUserRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateUserRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateUserRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateUserRsp::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 CreateUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.CreateUserRsp.user_id)
  return user_id_;
}
inline void CreateUserRsp::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.CreateUserRsp.user_id)
}

// -------------------------------------------------------------------

// LoginCheckReq

// optional .ssp.MsgHeader header = 1;
inline bool LoginCheckReq::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginCheckReq::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginCheckReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginCheckReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginCheckReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LoginCheckReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LoginCheckReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LoginCheckReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LoginCheckReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LoginCheckReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LoginCheckReq.header)
  return header_;
}
inline void LoginCheckReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginCheckReq.header)
}

// optional string user_name = 2;
inline bool LoginCheckReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginCheckReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginCheckReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginCheckReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& LoginCheckReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.LoginCheckReq.user_name)
  return user_name_.GetNoArena();
}
inline void LoginCheckReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.LoginCheckReq.user_name)
}
#if LANG_CXX11
inline void LoginCheckReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.LoginCheckReq.user_name)
}
#endif
inline void LoginCheckReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.LoginCheckReq.user_name)
}
inline void LoginCheckReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.LoginCheckReq.user_name)
}
inline ::std::string* LoginCheckReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.LoginCheckReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginCheckReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.LoginCheckReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginCheckReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginCheckReq.user_name)
}

// optional string password = 3;
inline bool LoginCheckReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginCheckReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginCheckReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginCheckReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LoginCheckReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.LoginCheckReq.password)
  return password_.GetNoArena();
}
inline void LoginCheckReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssp.LoginCheckReq.password)
}
#if LANG_CXX11
inline void LoginCheckReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssp.LoginCheckReq.password)
}
#endif
inline void LoginCheckReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssp.LoginCheckReq.password)
}
inline void LoginCheckReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssp.LoginCheckReq.password)
}
inline ::std::string* LoginCheckReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ssp.LoginCheckReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginCheckReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.LoginCheckReq.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginCheckReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginCheckReq.password)
}

// -------------------------------------------------------------------

// LoginCheckRsp

// optional .ssp.MsgHeader header = 1;
inline bool LoginCheckRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginCheckRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginCheckRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginCheckRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginCheckRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& LoginCheckRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.LoginCheckRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* LoginCheckRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.LoginCheckRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* LoginCheckRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.LoginCheckRsp.header)
  return header_;
}
inline void LoginCheckRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginCheckRsp.header)
}

// optional int32 ret = 2;
inline bool LoginCheckRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginCheckRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginCheckRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginCheckRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 LoginCheckRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.LoginCheckRsp.ret)
  return ret_;
}
inline void LoginCheckRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.LoginCheckRsp.ret)
}

// optional int32 user_id = 3;
inline bool LoginCheckRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginCheckRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginCheckRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginCheckRsp::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 LoginCheckRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LoginCheckRsp.user_id)
  return user_id_;
}
inline void LoginCheckRsp::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.LoginCheckRsp.user_id)
}

// -------------------------------------------------------------------

// CheckUserExistReq

// optional .ssp.MsgHeader header = 1;
inline bool CheckUserExistReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUserExistReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUserExistReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUserExistReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CheckUserExistReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CheckUserExistReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CheckUserExistReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CheckUserExistReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CheckUserExistReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CheckUserExistReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CheckUserExistReq.header)
  return header_;
}
inline void CheckUserExistReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CheckUserExistReq.header)
}

// optional int32 user_id = 2;
inline bool CheckUserExistReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckUserExistReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckUserExistReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckUserExistReq::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 CheckUserExistReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.CheckUserExistReq.user_id)
  return user_id_;
}
inline void CheckUserExistReq::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.CheckUserExistReq.user_id)
}

// -------------------------------------------------------------------

// CheckUserExistRsp

// optional .ssp.MsgHeader header = 1;
inline bool CheckUserExistRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUserExistRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUserExistRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUserExistRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CheckUserExistRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& CheckUserExistRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.CheckUserExistRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* CheckUserExistRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.CheckUserExistRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* CheckUserExistRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.CheckUserExistRsp.header)
  return header_;
}
inline void CheckUserExistRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.CheckUserExistRsp.header)
}

// optional int32 ret = 2;
inline bool CheckUserExistRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckUserExistRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckUserExistRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckUserExistRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 CheckUserExistRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.CheckUserExistRsp.ret)
  return ret_;
}
inline void CheckUserExistRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ssp.CheckUserExistRsp.ret)
}

// -------------------------------------------------------------------

// ServerToUserReq

// optional .ssp.MsgHeader header = 1;
inline bool ServerToUserReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerToUserReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerToUserReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerToUserReq::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& ServerToUserReq::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& ServerToUserReq::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.ServerToUserReq.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* ServerToUserReq::release_header() {
  // @@protoc_insertion_point(field_release:ssp.ServerToUserReq.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* ServerToUserReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.ServerToUserReq.header)
  return header_;
}
inline void ServerToUserReq::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.ServerToUserReq.header)
}

// optional .ssp.GetUserIdByNameReq get_user_id = 2;
inline bool ServerToUserReq::has_get_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerToUserReq::set_has_get_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerToUserReq::clear_has_get_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerToUserReq::clear_get_user_id() {
  if (get_user_id_ != NULL) get_user_id_->Clear();
  clear_has_get_user_id();
}
inline const ::ssp::GetUserIdByNameReq& ServerToUserReq::_internal_get_user_id() const {
  return *get_user_id_;
}
inline const ::ssp::GetUserIdByNameReq& ServerToUserReq::get_user_id() const {
  const ::ssp::GetUserIdByNameReq* p = get_user_id_;
  // @@protoc_insertion_point(field_get:ssp.ServerToUserReq.get_user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetUserIdByNameReq*>(
      &::ssp::_GetUserIdByNameReq_default_instance_);
}
inline ::ssp::GetUserIdByNameReq* ServerToUserReq::release_get_user_id() {
  // @@protoc_insertion_point(field_release:ssp.ServerToUserReq.get_user_id)
  clear_has_get_user_id();
  ::ssp::GetUserIdByNameReq* temp = get_user_id_;
  get_user_id_ = NULL;
  return temp;
}
inline ::ssp::GetUserIdByNameReq* ServerToUserReq::mutable_get_user_id() {
  set_has_get_user_id();
  if (get_user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetUserIdByNameReq>(GetArenaNoVirtual());
    get_user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.ServerToUserReq.get_user_id)
  return get_user_id_;
}
inline void ServerToUserReq::set_allocated_get_user_id(::ssp::GetUserIdByNameReq* get_user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_user_id_;
  }
  if (get_user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_user_id, submessage_arena);
    }
    set_has_get_user_id();
  } else {
    clear_has_get_user_id();
  }
  get_user_id_ = get_user_id;
  // @@protoc_insertion_point(field_set_allocated:ssp.ServerToUserReq.get_user_id)
}

// optional .ssp.CreateUserReq create_user = 3;
inline bool ServerToUserReq::has_create_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerToUserReq::set_has_create_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerToUserReq::clear_has_create_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerToUserReq::clear_create_user() {
  if (create_user_ != NULL) create_user_->Clear();
  clear_has_create_user();
}
inline const ::ssp::CreateUserReq& ServerToUserReq::_internal_create_user() const {
  return *create_user_;
}
inline const ::ssp::CreateUserReq& ServerToUserReq::create_user() const {
  const ::ssp::CreateUserReq* p = create_user_;
  // @@protoc_insertion_point(field_get:ssp.ServerToUserReq.create_user)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::CreateUserReq*>(
      &::ssp::_CreateUserReq_default_instance_);
}
inline ::ssp::CreateUserReq* ServerToUserReq::release_create_user() {
  // @@protoc_insertion_point(field_release:ssp.ServerToUserReq.create_user)
  clear_has_create_user();
  ::ssp::CreateUserReq* temp = create_user_;
  create_user_ = NULL;
  return temp;
}
inline ::ssp::CreateUserReq* ServerToUserReq::mutable_create_user() {
  set_has_create_user();
  if (create_user_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::CreateUserReq>(GetArenaNoVirtual());
    create_user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.ServerToUserReq.create_user)
  return create_user_;
}
inline void ServerToUserReq::set_allocated_create_user(::ssp::CreateUserReq* create_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_user_;
  }
  if (create_user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_user, submessage_arena);
    }
    set_has_create_user();
  } else {
    clear_has_create_user();
  }
  create_user_ = create_user;
  // @@protoc_insertion_point(field_set_allocated:ssp.ServerToUserReq.create_user)
}

// optional .ssp.LoginCheckReq login_check = 4;
inline bool ServerToUserReq::has_login_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerToUserReq::set_has_login_check() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerToUserReq::clear_has_login_check() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerToUserReq::clear_login_check() {
  if (login_check_ != NULL) login_check_->Clear();
  clear_has_login_check();
}
inline const ::ssp::LoginCheckReq& ServerToUserReq::_internal_login_check() const {
  return *login_check_;
}
inline const ::ssp::LoginCheckReq& ServerToUserReq::login_check() const {
  const ::ssp::LoginCheckReq* p = login_check_;
  // @@protoc_insertion_point(field_get:ssp.ServerToUserReq.login_check)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LoginCheckReq*>(
      &::ssp::_LoginCheckReq_default_instance_);
}
inline ::ssp::LoginCheckReq* ServerToUserReq::release_login_check() {
  // @@protoc_insertion_point(field_release:ssp.ServerToUserReq.login_check)
  clear_has_login_check();
  ::ssp::LoginCheckReq* temp = login_check_;
  login_check_ = NULL;
  return temp;
}
inline ::ssp::LoginCheckReq* ServerToUserReq::mutable_login_check() {
  set_has_login_check();
  if (login_check_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LoginCheckReq>(GetArenaNoVirtual());
    login_check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.ServerToUserReq.login_check)
  return login_check_;
}
inline void ServerToUserReq::set_allocated_login_check(::ssp::LoginCheckReq* login_check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_check_;
  }
  if (login_check) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_check, submessage_arena);
    }
    set_has_login_check();
  } else {
    clear_has_login_check();
  }
  login_check_ = login_check;
  // @@protoc_insertion_point(field_set_allocated:ssp.ServerToUserReq.login_check)
}

// optional .ssp.CheckUserExistReq check_user_exist = 5;
inline bool ServerToUserReq::has_check_user_exist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerToUserReq::set_has_check_user_exist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerToUserReq::clear_has_check_user_exist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerToUserReq::clear_check_user_exist() {
  if (check_user_exist_ != NULL) check_user_exist_->Clear();
  clear_has_check_user_exist();
}
inline const ::ssp::CheckUserExistReq& ServerToUserReq::_internal_check_user_exist() const {
  return *check_user_exist_;
}
inline const ::ssp::CheckUserExistReq& ServerToUserReq::check_user_exist() const {
  const ::ssp::CheckUserExistReq* p = check_user_exist_;
  // @@protoc_insertion_point(field_get:ssp.ServerToUserReq.check_user_exist)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::CheckUserExistReq*>(
      &::ssp::_CheckUserExistReq_default_instance_);
}
inline ::ssp::CheckUserExistReq* ServerToUserReq::release_check_user_exist() {
  // @@protoc_insertion_point(field_release:ssp.ServerToUserReq.check_user_exist)
  clear_has_check_user_exist();
  ::ssp::CheckUserExistReq* temp = check_user_exist_;
  check_user_exist_ = NULL;
  return temp;
}
inline ::ssp::CheckUserExistReq* ServerToUserReq::mutable_check_user_exist() {
  set_has_check_user_exist();
  if (check_user_exist_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::CheckUserExistReq>(GetArenaNoVirtual());
    check_user_exist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.ServerToUserReq.check_user_exist)
  return check_user_exist_;
}
inline void ServerToUserReq::set_allocated_check_user_exist(::ssp::CheckUserExistReq* check_user_exist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check_user_exist_;
  }
  if (check_user_exist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_user_exist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_user_exist, submessage_arena);
    }
    set_has_check_user_exist();
  } else {
    clear_has_check_user_exist();
  }
  check_user_exist_ = check_user_exist;
  // @@protoc_insertion_point(field_set_allocated:ssp.ServerToUserReq.check_user_exist)
}

// -------------------------------------------------------------------

// UserToServerRsp

// optional .ssp.MsgHeader header = 1;
inline bool UserToServerRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserToServerRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserToServerRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserToServerRsp::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& UserToServerRsp::_internal_header() const {
  return *header_;
}
inline const ::ssp::MsgHeader& UserToServerRsp::header() const {
  const ::ssp::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:ssp.UserToServerRsp.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::MsgHeader*>(
      &::ssp::_MsgHeader_default_instance_);
}
inline ::ssp::MsgHeader* UserToServerRsp::release_header() {
  // @@protoc_insertion_point(field_release:ssp.UserToServerRsp.header)
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ssp::MsgHeader* UserToServerRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.UserToServerRsp.header)
  return header_;
}
inline void UserToServerRsp::set_allocated_header(::ssp::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ssp.UserToServerRsp.header)
}

// optional .ssp.GetUserIdByNameRsp get_user_id = 2;
inline bool UserToServerRsp::has_get_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserToServerRsp::set_has_get_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserToServerRsp::clear_has_get_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserToServerRsp::clear_get_user_id() {
  if (get_user_id_ != NULL) get_user_id_->Clear();
  clear_has_get_user_id();
}
inline const ::ssp::GetUserIdByNameRsp& UserToServerRsp::_internal_get_user_id() const {
  return *get_user_id_;
}
inline const ::ssp::GetUserIdByNameRsp& UserToServerRsp::get_user_id() const {
  const ::ssp::GetUserIdByNameRsp* p = get_user_id_;
  // @@protoc_insertion_point(field_get:ssp.UserToServerRsp.get_user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::GetUserIdByNameRsp*>(
      &::ssp::_GetUserIdByNameRsp_default_instance_);
}
inline ::ssp::GetUserIdByNameRsp* UserToServerRsp::release_get_user_id() {
  // @@protoc_insertion_point(field_release:ssp.UserToServerRsp.get_user_id)
  clear_has_get_user_id();
  ::ssp::GetUserIdByNameRsp* temp = get_user_id_;
  get_user_id_ = NULL;
  return temp;
}
inline ::ssp::GetUserIdByNameRsp* UserToServerRsp::mutable_get_user_id() {
  set_has_get_user_id();
  if (get_user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::GetUserIdByNameRsp>(GetArenaNoVirtual());
    get_user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.UserToServerRsp.get_user_id)
  return get_user_id_;
}
inline void UserToServerRsp::set_allocated_get_user_id(::ssp::GetUserIdByNameRsp* get_user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_user_id_;
  }
  if (get_user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_user_id, submessage_arena);
    }
    set_has_get_user_id();
  } else {
    clear_has_get_user_id();
  }
  get_user_id_ = get_user_id;
  // @@protoc_insertion_point(field_set_allocated:ssp.UserToServerRsp.get_user_id)
}

// optional .ssp.CreateUserRsp create_user = 3;
inline bool UserToServerRsp::has_create_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserToServerRsp::set_has_create_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserToServerRsp::clear_has_create_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserToServerRsp::clear_create_user() {
  if (create_user_ != NULL) create_user_->Clear();
  clear_has_create_user();
}
inline const ::ssp::CreateUserRsp& UserToServerRsp::_internal_create_user() const {
  return *create_user_;
}
inline const ::ssp::CreateUserRsp& UserToServerRsp::create_user() const {
  const ::ssp::CreateUserRsp* p = create_user_;
  // @@protoc_insertion_point(field_get:ssp.UserToServerRsp.create_user)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::CreateUserRsp*>(
      &::ssp::_CreateUserRsp_default_instance_);
}
inline ::ssp::CreateUserRsp* UserToServerRsp::release_create_user() {
  // @@protoc_insertion_point(field_release:ssp.UserToServerRsp.create_user)
  clear_has_create_user();
  ::ssp::CreateUserRsp* temp = create_user_;
  create_user_ = NULL;
  return temp;
}
inline ::ssp::CreateUserRsp* UserToServerRsp::mutable_create_user() {
  set_has_create_user();
  if (create_user_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::CreateUserRsp>(GetArenaNoVirtual());
    create_user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.UserToServerRsp.create_user)
  return create_user_;
}
inline void UserToServerRsp::set_allocated_create_user(::ssp::CreateUserRsp* create_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_user_;
  }
  if (create_user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_user, submessage_arena);
    }
    set_has_create_user();
  } else {
    clear_has_create_user();
  }
  create_user_ = create_user;
  // @@protoc_insertion_point(field_set_allocated:ssp.UserToServerRsp.create_user)
}

// optional .ssp.LoginCheckRsp login_check = 4;
inline bool UserToServerRsp::has_login_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserToServerRsp::set_has_login_check() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserToServerRsp::clear_has_login_check() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserToServerRsp::clear_login_check() {
  if (login_check_ != NULL) login_check_->Clear();
  clear_has_login_check();
}
inline const ::ssp::LoginCheckRsp& UserToServerRsp::_internal_login_check() const {
  return *login_check_;
}
inline const ::ssp::LoginCheckRsp& UserToServerRsp::login_check() const {
  const ::ssp::LoginCheckRsp* p = login_check_;
  // @@protoc_insertion_point(field_get:ssp.UserToServerRsp.login_check)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::LoginCheckRsp*>(
      &::ssp::_LoginCheckRsp_default_instance_);
}
inline ::ssp::LoginCheckRsp* UserToServerRsp::release_login_check() {
  // @@protoc_insertion_point(field_release:ssp.UserToServerRsp.login_check)
  clear_has_login_check();
  ::ssp::LoginCheckRsp* temp = login_check_;
  login_check_ = NULL;
  return temp;
}
inline ::ssp::LoginCheckRsp* UserToServerRsp::mutable_login_check() {
  set_has_login_check();
  if (login_check_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::LoginCheckRsp>(GetArenaNoVirtual());
    login_check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.UserToServerRsp.login_check)
  return login_check_;
}
inline void UserToServerRsp::set_allocated_login_check(::ssp::LoginCheckRsp* login_check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete login_check_;
  }
  if (login_check) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_check, submessage_arena);
    }
    set_has_login_check();
  } else {
    clear_has_login_check();
  }
  login_check_ = login_check;
  // @@protoc_insertion_point(field_set_allocated:ssp.UserToServerRsp.login_check)
}

// optional .ssp.CheckUserExistRsp check_user_exist = 5;
inline bool UserToServerRsp::has_check_user_exist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserToServerRsp::set_has_check_user_exist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserToServerRsp::clear_has_check_user_exist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserToServerRsp::clear_check_user_exist() {
  if (check_user_exist_ != NULL) check_user_exist_->Clear();
  clear_has_check_user_exist();
}
inline const ::ssp::CheckUserExistRsp& UserToServerRsp::_internal_check_user_exist() const {
  return *check_user_exist_;
}
inline const ::ssp::CheckUserExistRsp& UserToServerRsp::check_user_exist() const {
  const ::ssp::CheckUserExistRsp* p = check_user_exist_;
  // @@protoc_insertion_point(field_get:ssp.UserToServerRsp.check_user_exist)
  return p != NULL ? *p : *reinterpret_cast<const ::ssp::CheckUserExistRsp*>(
      &::ssp::_CheckUserExistRsp_default_instance_);
}
inline ::ssp::CheckUserExistRsp* UserToServerRsp::release_check_user_exist() {
  // @@protoc_insertion_point(field_release:ssp.UserToServerRsp.check_user_exist)
  clear_has_check_user_exist();
  ::ssp::CheckUserExistRsp* temp = check_user_exist_;
  check_user_exist_ = NULL;
  return temp;
}
inline ::ssp::CheckUserExistRsp* UserToServerRsp::mutable_check_user_exist() {
  set_has_check_user_exist();
  if (check_user_exist_ == NULL) {
    auto* p = CreateMaybeMessage<::ssp::CheckUserExistRsp>(GetArenaNoVirtual());
    check_user_exist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssp.UserToServerRsp.check_user_exist)
  return check_user_exist_;
}
inline void UserToServerRsp::set_allocated_check_user_exist(::ssp::CheckUserExistRsp* check_user_exist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check_user_exist_;
  }
  if (check_user_exist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_user_exist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_user_exist, submessage_arena);
    }
    set_has_check_user_exist();
  } else {
    clear_has_check_user_exist();
  }
  check_user_exist_ = check_user_exist;
  // @@protoc_insertion_point(field_set_allocated:ssp.UserToServerRsp.check_user_exist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_5fdefine_2eproto
